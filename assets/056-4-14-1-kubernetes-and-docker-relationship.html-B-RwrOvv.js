import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as l,o as e}from"./app-DAaD84tA.js";const a={};function t(r,i){return e(),n("div",null,[...i[0]||(i[0]=[l(`<h2 id="kubernetes-与-docker-的关系" tabindex="-1"><a class="header-anchor" href="#kubernetes-与-docker-的关系"><span>Kubernetes 与 Docker 的关系</span></a></h2><h3 id="容器生态系统概述" tabindex="-1"><a class="header-anchor" href="#容器生态系统概述"><span>容器生态系统概述</span></a></h3><p>在现代软件开发和部署中，容器技术已经成为基础设施的重要组成部分。Docker 作为容器技术的先驱和领导者，为应用的打包、分发和运行提供了标准化的解决方案。而 Kubernetes 作为容器编排的事实标准，为大规模容器集群的管理提供了强大的平台。</p><h3 id="docker-的角色与功能" tabindex="-1"><a class="header-anchor" href="#docker-的角色与功能"><span>Docker 的角色与功能</span></a></h3><p>Docker 是一个开源的容器化平台，主要负责以下功能：</p><ol><li><p><strong>镜像构建</strong>：</p><ul><li>提供 Dockerfile 格式定义应用环境</li><li>构建轻量级、可移植的容器镜像</li></ul></li><li><p><strong>容器运行</strong>：</p><ul><li>在主机上运行和管理容器</li><li>提供容器生命周期管理</li></ul></li><li><p><strong>镜像分发</strong>：</p><ul><li>通过 Docker Registry 存储和分发镜像</li><li>支持镜像版本管理和共享</li></ul></li></ol><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-dockerfile"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 示例 Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> node:14-alpine</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /app</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> package*.json ./</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> npm install</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . .</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;node&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;server.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kubernetes-的角色与功能" tabindex="-1"><a class="header-anchor" href="#kubernetes-的角色与功能"><span>Kubernetes 的角色与功能</span></a></h3><p>Kubernetes 是一个开源的容器编排平台，主要负责以下功能：</p><ol><li><p><strong>集群管理</strong>：</p><ul><li>管理多个主机组成的集群</li><li>提供高可用性和容错能力</li></ul></li><li><p><strong>服务编排</strong>：</p><ul><li>自动部署和扩展应用</li><li>管理服务间的依赖关系</li></ul></li><li><p><strong>资源调度</strong>：</p><ul><li>根据资源需求和约束调度容器</li><li>优化资源利用率</li></ul></li></ol><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 示例 Kubernetes Deployment</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">apiVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">apps/v1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Deployment</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx-deployment</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  replicas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  selector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    matchLabels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      labels</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    spec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      containers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx:1.14.2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        - </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">containerPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="两者的关系演进" tabindex="-1"><a class="header-anchor" href="#两者的关系演进"><span>两者的关系演进</span></a></h3><h4 id="早期集成" tabindex="-1"><a class="header-anchor" href="#早期集成"><span>早期集成</span></a></h4><p>在早期，Kubernetes 主要使用 Docker 作为容器运行时：</p><ol><li><p><strong>Docker Shim</strong>：</p><ul><li>Kubernetes 通过 Docker Shim 与 Docker 交互</li><li>Docker 负责容器的创建和管理</li></ul></li><li><p><strong>紧密耦合</strong>：</p><ul><li>Kubernetes 依赖 Docker 的特定功能</li><li>两者深度集成</li></ul></li></ol><h4 id="标准化发展" tabindex="-1"><a class="header-anchor" href="#标准化发展"><span>标准化发展</span></a></h4><p>随着容器技术的发展，行业开始推动标准化：</p><ol><li><p><strong>OCI 标准</strong>：</p><ul><li>开放容器倡议（OCI）定义了容器镜像和运行时标准</li><li>Docker 成为 OCI 标准的实现之一</li></ul></li><li><p><strong>CRI 接口</strong>：</p><ul><li>Kubernetes 定义了容器运行时接口（CRI）</li><li>支持多种容器运行时</li></ul></li></ol><h4 id="现代架构" tabindex="-1"><a class="header-anchor" href="#现代架构"><span>现代架构</span></a></h4><p>现代 Kubernetes 集群可以使用多种容器运行时：</p><ol><li><p><strong>containerd</strong>：</p><ul><li>Docker 公司开源的容器运行时</li><li>成为 Kubernetes 的主流选择</li></ul></li><li><p><strong>CRI-O</strong>：</p><ul><li>Red Hat 主导的轻量级容器运行时</li><li>专为 Kubernetes 设计</li></ul></li><li><p><strong>其他运行时</strong>：</p><ul><li>gVisor、Kata Containers 等安全容器运行时</li></ul></li></ol><h3 id="架构对比" tabindex="-1"><a class="header-anchor" href="#架构对比"><span>架构对比</span></a></h3><h4 id="docker-架构" tabindex="-1"><a class="header-anchor" href="#docker-架构"><span>Docker 架构</span></a></h4><p>Docker 采用客户端-服务器架构：</p><ol><li><p><strong>Docker Daemon</strong>：</p><ul><li>在主机上运行的后台服务</li><li>负责镜像管理、容器运行等</li></ul></li><li><p><strong>Docker Client</strong>：</p><ul><li>用户交互的命令行工具</li><li>发送命令到 Docker Daemon</li></ul></li><li><p><strong>Docker Registry</strong>：</p><ul><li>存储和分发镜像的仓库</li><li>支持公共和私有仓库</li></ul></li></ol><h4 id="kubernetes-架构" tabindex="-1"><a class="header-anchor" href="#kubernetes-架构"><span>Kubernetes 架构</span></a></h4><p>Kubernetes 采用主从架构：</p><ol><li><p><strong>控制平面（Control Plane）</strong>：</p><ul><li>API Server：集群管理接口</li><li>etcd：分布式存储集群状态</li><li>Scheduler：资源调度器</li><li>Controller Manager：集群控制器</li></ul></li><li><p><strong>工作节点（Worker Nodes）</strong>：</p><ul><li>kubelet：节点代理</li><li>kube-proxy：网络代理</li><li>容器运行时：运行容器</li></ul></li></ol><h3 id="集成优势" tabindex="-1"><a class="header-anchor" href="#集成优势"><span>集成优势</span></a></h3><h4 id="简化部署" tabindex="-1"><a class="header-anchor" href="#简化部署"><span>简化部署</span></a></h4><ol><li><p><strong>标准化流程</strong>：</p><ul><li>使用 Docker 构建标准化镜像</li><li>通过 Kubernetes 统一部署管理</li></ul></li><li><p><strong>环境一致性</strong>：</p><ul><li>开发、测试、生产环境一致</li><li>减少环境差异导致的问题</li></ul></li></ol><h4 id="提高效率" tabindex="-1"><a class="header-anchor" href="#提高效率"><span>提高效率</span></a></h4><ol><li><p><strong>自动化运维</strong>：</p><ul><li>自动部署、扩展和恢复</li><li>减少人工干预</li></ul></li><li><p><strong>资源优化</strong>：</p><ul><li>智能调度和资源分配</li><li>提高资源利用率</li></ul></li></ol><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><h4 id="适合-kubernetes-docker-的场景" tabindex="-1"><a class="header-anchor" href="#适合-kubernetes-docker-的场景"><span>适合 Kubernetes + Docker 的场景</span></a></h4><ol><li><p><strong>大规模部署</strong>：</p><ul><li>需要管理数百个容器实例</li><li>要求高可用性和容错能力</li></ul></li><li><p><strong>微服务架构</strong>：</p><ul><li>应用拆分为多个独立服务</li><li>需要服务发现和负载均衡</li></ul></li><li><p><strong>云原生应用</strong>：</p><ul><li>遵循云原生设计原则</li><li>需要弹性扩展和自动恢复</li></ul></li></ol><h4 id="仅使用-docker-的场景" tabindex="-1"><a class="header-anchor" href="#仅使用-docker-的场景"><span>仅使用 Docker 的场景</span></a></h4><ol><li><p><strong>简单应用</strong>：</p><ul><li>单体应用或少量容器</li><li>不需要复杂的编排功能</li></ul></li><li><p><strong>开发测试</strong>：</p><ul><li>本地开发和测试环境</li><li>快速原型验证</li></ul></li></ol><h3 id="未来发展趋势" tabindex="-1"><a class="header-anchor" href="#未来发展趋势"><span>未来发展趋势</span></a></h3><h4 id="容器运行时多样化" tabindex="-1"><a class="header-anchor" href="#容器运行时多样化"><span>容器运行时多样化</span></a></h4><ol><li><p><strong>技术选择丰富</strong>：</p><ul><li>根据需求选择合适的运行时</li><li>安全容器、轻量级容器等</li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li>针对特定场景优化运行时</li><li>提高启动速度和资源效率</li></ul></li></ol><h4 id="生态系统整合" tabindex="-1"><a class="header-anchor" href="#生态系统整合"><span>生态系统整合</span></a></h4><ol><li><p><strong>工具链完善</strong>：</p><ul><li>更好的开发工具集成</li><li>统一的监控和日志解决方案</li></ul></li><li><p><strong>平台化发展</strong>：</p><ul><li>云厂商提供托管 Kubernetes 服务</li><li>简化集群部署和管理</li></ul></li></ol><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h3><h4 id="镜像构建" tabindex="-1"><a class="header-anchor" href="#镜像构建"><span>镜像构建</span></a></h4><ol><li><p><strong>分层优化</strong>：</p><ul><li>合理组织 Dockerfile 指令</li><li>利用构建缓存提高效率</li></ul></li><li><p><strong>安全考虑</strong>：</p><ul><li>使用最小基础镜像</li><li>定期扫描和更新镜像</li></ul></li></ol><h4 id="集群部署" tabindex="-1"><a class="header-anchor" href="#集群部署"><span>集群部署</span></a></h4><ol><li><p><strong>资源规划</strong>：</p><ul><li>合理分配 CPU 和内存资源</li><li>设置适当的资源限制和请求</li></ul></li><li><p><strong>网络配置</strong>：</p><ul><li>选择合适的网络插件</li><li>配置网络安全策略</li></ul></li></ol><p>通过本节内容，我们深入了解了 Kubernetes 与 Docker 的关系，包括它们各自的角色、功能以及如何协同工作。理解这种关系对于构建现代化的容器化应用至关重要。</p>`,49)])])}const o=s(a,[["render",t]]),k=JSON.parse('{"path":"/posts/container-docker/056-4-14-1-kubernetes-and-docker-relationship.html","title":"Kubernetes and Docker Relationship - Understanding the Connection Between Containerization and Orchestration","lang":"zh-CN","frontmatter":{"title":"Kubernetes and Docker Relationship - Understanding the Connection Between Containerization and Orchestration","date":"2025-08-31T00:00:00.000Z","categories":["Docker"],"tags":["container-docker"],"published":true,"description":"Kubernetes 与 Docker 的关系 容器生态系统概述 在现代软件开发和部署中，容器技术已经成为基础设施的重要组成部分。Docker 作为容器技术的先驱和领导者，为应用的打包、分发和运行提供了标准化的解决方案。而 Kubernetes 作为容器编排的事实标准，为大规模容器集群的管理提供了强大的平台。 Docker 的角色与功能 Docker ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kubernetes and Docker Relationship - Understanding the Connection Between Containerization and Orchestration\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T09:05:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/container-docker/056-4-14-1-kubernetes-and-docker-relationship.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Kubernetes and Docker Relationship - Understanding the Connection Between Containerization and Orchestration"}],["meta",{"property":"og:description","content":"Kubernetes 与 Docker 的关系 容器生态系统概述 在现代软件开发和部署中，容器技术已经成为基础设施的重要组成部分。Docker 作为容器技术的先驱和领导者，为应用的打包、分发和运行提供了标准化的解决方案。而 Kubernetes 作为容器编排的事实标准，为大规模容器集群的管理提供了强大的平台。 Docker 的角色与功能 Docker ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T09:05:07.000Z"}],["meta",{"property":"article:tag","content":"container-docker"}],["meta",{"property":"article:published_time","content":"2025-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T09:05:07.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1757235907000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":4.48,"words":1344},"filePathRelative":"posts/container-docker/056-4-14-1-kubernetes-and-docker-relationship.md","excerpt":"<h2>Kubernetes 与 Docker 的关系</h2>\\n<h3>容器生态系统概述</h3>\\n<p>在现代软件开发和部署中，容器技术已经成为基础设施的重要组成部分。Docker 作为容器技术的先驱和领导者，为应用的打包、分发和运行提供了标准化的解决方案。而 Kubernetes 作为容器编排的事实标准，为大规模容器集群的管理提供了强大的平台。</p>\\n<h3>Docker 的角色与功能</h3>\\n<p>Docker 是一个开源的容器化平台，主要负责以下功能：</p>\\n<ol>\\n<li>\\n<p><strong>镜像构建</strong>：</p>\\n<ul>\\n<li>提供 Dockerfile 格式定义应用环境</li>\\n<li>构建轻量级、可移植的容器镜像</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>容器运行</strong>：</p>\\n<ul>\\n<li>在主机上运行和管理容器</li>\\n<li>提供容器生命周期管理</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>镜像分发</strong>：</p>\\n<ul>\\n<li>通过 Docker Registry 存储和分发镜像</li>\\n<li>支持镜像版本管理和共享</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{o as comp,k as data};
