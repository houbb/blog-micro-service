import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as r,o as a}from"./app-DjwXz1dH.js";const i={};function n(s,e){return a(),o("div",null,[...e[0]||(e[0]=[r('<h1 id="第4章-常见微服务架构模型" tabindex="-1"><a class="header-anchor" href="#第4章-常见微服务架构模型"><span>第4章 常见微服务架构模型</span></a></h1><p>微服务架构并非一成不变的模式，而是随着技术发展和业务需求不断演进的。从传统的单体架构到现代的云原生架构，微服务经历了多个发展阶段，形成了多种不同的架构模型。本章将深入探讨这些常见的微服务架构模型，帮助读者理解它们的特点、适用场景和实现方式。</p><h2 id="单体架构与微服务架构的演变" tabindex="-1"><a class="header-anchor" href="#单体架构与微服务架构的演变"><span>单体架构与微服务架构的演变</span></a></h2><p>单体架构是微服务架构的前身，理解两者之间的演变关系有助于我们更好地把握微服务的本质。从单体架构到微服务架构的转变不仅仅是技术层面的重构，更是设计理念和组织结构的变革。</p><h2 id="持久化与无状态模型" tabindex="-1"><a class="header-anchor" href="#持久化与无状态模型"><span>持久化与无状态模型</span></a></h2><p>在微服务架构中，服务的状态管理是一个重要考虑因素。持久化模型和无状态模型各有优劣，需要根据具体业务场景进行选择。无状态服务更易于扩展和管理，而持久化服务在某些场景下是必要的。</p><h2 id="微服务的层次模型与分层架构" tabindex="-1"><a class="header-anchor" href="#微服务的层次模型与分层架构"><span>微服务的层次模型与分层架构</span></a></h2><p>微服务架构可以通过不同的层次划分来组织系统结构，包括表现层、业务逻辑层、数据访问层等。合理的分层架构有助于提高系统的可维护性和可扩展性。</p><h2 id="api-网关与服务代理模型" tabindex="-1"><a class="header-anchor" href="#api-网关与服务代理模型"><span>API 网关与服务代理模型</span></a></h2><p>API网关作为微服务架构中的重要组件，承担着请求路由、负载均衡、安全控制等职责。服务代理模型则提供了更细粒度的服务治理能力。</p><p>本章将深入探讨这些架构模型，帮助读者理解如何根据业务需求选择合适的架构模式。</p>',11)])])}const m=t(i,[["render",n]]),h=JSON.parse('{"path":"/posts/microservice-models-design-pattern/2-4-0-Common-Microservices-Architecture-Models.html","title":"常见微服务架构模型：从单体到云原生的演进之路","lang":"zh-CN","frontmatter":{"title":"常见微服务架构模型：从单体到云原生的演进之路","date":"2025-08-31T00:00:00.000Z","categories":["ModelsDesignPattern"],"tags":["microservice-models-design-pattern"],"published":true,"description":"第4章 常见微服务架构模型 微服务架构并非一成不变的模式，而是随着技术发展和业务需求不断演进的。从传统的单体架构到现代的云原生架构，微服务经历了多个发展阶段，形成了多种不同的架构模型。本章将深入探讨这些常见的微服务架构模型，帮助读者理解它们的特点、适用场景和实现方式。 单体架构与微服务架构的演变 单体架构是微服务架构的前身，理解两者之间的演变关系有助于...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见微服务架构模型：从单体到云原生的演进之路\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-01T13:27:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/microservice-models-design-pattern/2-4-0-Common-Microservices-Architecture-Models.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"常见微服务架构模型：从单体到云原生的演进之路"}],["meta",{"property":"og:description","content":"第4章 常见微服务架构模型 微服务架构并非一成不变的模式，而是随着技术发展和业务需求不断演进的。从传统的单体架构到现代的云原生架构，微服务经历了多个发展阶段，形成了多种不同的架构模型。本章将深入探讨这些常见的微服务架构模型，帮助读者理解它们的特点、适用场景和实现方式。 单体架构与微服务架构的演变 单体架构是微服务架构的前身，理解两者之间的演变关系有助于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T13:27:06.000Z"}],["meta",{"property":"article:tag","content":"microservice-models-design-pattern"}],["meta",{"property":"article:published_time","content":"2025-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-01T13:27:06.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1756733226000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":1.73,"words":518},"filePathRelative":"posts/microservice-models-design-pattern/2-4-0-Common-Microservices-Architecture-Models.md","excerpt":"\\n<p>微服务架构并非一成不变的模式，而是随着技术发展和业务需求不断演进的。从传统的单体架构到现代的云原生架构，微服务经历了多个发展阶段，形成了多种不同的架构模型。本章将深入探讨这些常见的微服务架构模型，帮助读者理解它们的特点、适用场景和实现方式。</p>\\n<h2>单体架构与微服务架构的演变</h2>\\n<p>单体架构是微服务架构的前身，理解两者之间的演变关系有助于我们更好地把握微服务的本质。从单体架构到微服务架构的转变不仅仅是技术层面的重构，更是设计理念和组织结构的变革。</p>\\n<h2>持久化与无状态模型</h2>\\n<p>在微服务架构中，服务的状态管理是一个重要考虑因素。持久化模型和无状态模型各有优劣，需要根据具体业务场景进行选择。无状态服务更易于扩展和管理，而持久化服务在某些场景下是必要的。</p>","autoDesc":true}');export{m as comp,h as data};
