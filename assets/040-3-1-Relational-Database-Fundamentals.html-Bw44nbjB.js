import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,o as n}from"./app-DAaD84tA.js";const t={};function l(r,a){return n(),i("div",null,[...a[0]||(a[0]=[e(`<p>关系型数据库管理系统（Relational Database Management System，RDBMS）自20世纪70年代问世以来，一直是数据存储和管理领域的主流技术。从企业级应用到个人项目，从金融系统到社交媒体平台，关系型数据库以其严谨的理论基础、强大的数据一致性和丰富的功能特性，支撑着现代社会的大量数据处理需求。</p><h2 id="关系型数据库的概念" tabindex="-1"><a class="header-anchor" href="#关系型数据库的概念"><span>关系型数据库的概念</span></a></h2><p>关系型数据库是基于关系模型的数据库，由埃德加·科德（Edgar F. Codd）在1970年提出。关系模型使用数学概念来描述和操作数据，将数据组织成行和列的表格形式，这些表格被称为关系（Relation）。</p><h3 id="关系模型的核心概念" tabindex="-1"><a class="header-anchor" href="#关系模型的核心概念"><span>关系模型的核心概念</span></a></h3><h4 id="关系-relation" tabindex="-1"><a class="header-anchor" href="#关系-relation"><span>关系（Relation）</span></a></h4><p>在关系型数据库中，关系是数据的逻辑结构，表现为二维表。每个关系具有以下特征：</p><ul><li><strong>行（Row）</strong>：也称为元组（Tuple），代表一个实体的实例</li><li><strong>列（Column）</strong>：也称为属性（Attribute），代表实体的特征</li><li><strong>域（Domain）</strong>：列的取值范围，定义了该列可以接受的数据类型</li></ul><h4 id="主键-primary-key" tabindex="-1"><a class="header-anchor" href="#主键-primary-key"><span>主键（Primary Key）</span></a></h4><p>主键是关系中能够唯一标识每一行数据的属性或属性组合。主键具有以下特点：</p><ul><li><strong>唯一性</strong>：主键值在表中必须是唯一的</li><li><strong>非空性</strong>：主键值不能为空（NULL）</li><li><strong>稳定性</strong>：主键值一旦确定，不应轻易更改</li></ul><h4 id="外键-foreign-key" tabindex="-1"><a class="header-anchor" href="#外键-foreign-key"><span>外键（Foreign Key）</span></a></h4><p>外键是建立表与表之间关系的纽带，它是一个表中的属性或属性组合，引用另一个表的主键。外键的作用包括：</p><ul><li><strong>维护参照完整性</strong>：确保数据的一致性</li><li><strong>建立表间关系</strong>：实现数据的关联查询</li><li><strong>级联操作</strong>：支持相关的更新和删除操作</li></ul><h3 id="关系代数" tabindex="-1"><a class="header-anchor" href="#关系代数"><span>关系代数</span></a></h3><p>关系代数是关系型数据库的理论基础，它定义了一组操作来处理关系数据：</p><ul><li><strong>选择（Selection）</strong>：从关系中选择满足条件的行</li><li><strong>投影（Projection）</strong>：从关系中选择特定的列</li><li><strong>并集（Union）</strong>：将两个关系合并</li><li><strong>差集（Difference）</strong>：获取两个关系的差集</li><li><strong>笛卡尔积（Cartesian Product）</strong>：将两个关系的所有行进行组合</li><li><strong>连接（Join）</strong>：基于某些条件将两个关系的行组合起来</li></ul><h2 id="数据库设计-er-图与规范化" tabindex="-1"><a class="header-anchor" href="#数据库设计-er-图与规范化"><span>数据库设计：ER 图与规范化</span></a></h2><p>良好的数据库设计是构建高效、可靠关系型数据库系统的基础。数据库设计主要包括概念设计、逻辑设计和物理设计三个阶段。</p><h3 id="实体-关系模型-er-model" tabindex="-1"><a class="header-anchor" href="#实体-关系模型-er-model"><span>实体-关系模型（ER Model）</span></a></h3><p>实体-关系模型是数据库概念设计的重要工具，它通过图形化的方式描述现实世界中的实体及其关系。</p><h4 id="实体-entity" tabindex="-1"><a class="header-anchor" href="#实体-entity"><span>实体（Entity）</span></a></h4><p>实体是现实世界中可以区分的对象或概念，如学生、课程、订单等。实体具有以下特征：</p><ul><li><strong>唯一标识</strong>：每个实体都有唯一的标识符</li><li><strong>属性集合</strong>：实体具有一组描述其特征的属性</li><li><strong>实例集合</strong>：实体由多个具体的实例组成</li></ul><h4 id="属性-attribute" tabindex="-1"><a class="header-anchor" href="#属性-attribute"><span>属性（Attribute）</span></a></h4><p>属性是实体的特征或性质，如学生的姓名、年龄、学号等。属性可以分为：</p><ul><li><strong>简单属性</strong>：不可再分的属性，如姓名</li><li><strong>复合属性</strong>：可以进一步分解的属性，如地址可分解为省、市、街道等</li><li><strong>单值属性</strong>：只能取单一值的属性，如学号</li><li><strong>多值属性</strong>：可以取多个值的属性，如电话号码</li></ul><h4 id="关系-relationship" tabindex="-1"><a class="header-anchor" href="#关系-relationship"><span>关系（Relationship）</span></a></h4><p>关系表示实体之间的联系，如学生选修课程、员工属于部门等。关系具有以下特征：</p><ul><li><strong>度数（Degree）</strong>：参与关系的实体类型数量</li><li><strong>基数（Cardinality）</strong>：关系中实体实例之间的数量对应关系</li></ul><h3 id="数据库规范化" tabindex="-1"><a class="header-anchor" href="#数据库规范化"><span>数据库规范化</span></a></h3><p>数据库规范化是消除数据冗余、提高数据一致性的过程。规范化通过一系列范式来指导数据库设计：</p><h4 id="第一范式-1nf" tabindex="-1"><a class="header-anchor" href="#第一范式-1nf"><span>第一范式（1NF）</span></a></h4><p>第一范式要求表中的每个属性都是不可分割的原子值，即表中的每个字段都必须是单一值，不能包含集合、数组或复合值。</p><h4 id="第二范式-2nf" tabindex="-1"><a class="header-anchor" href="#第二范式-2nf"><span>第二范式（2NF）</span></a></h4><p>第二范式要求表满足第一范式，并且所有非主属性都完全依赖于主键，而不是依赖于主键的一部分。</p><h4 id="第三范式-3nf" tabindex="-1"><a class="header-anchor" href="#第三范式-3nf"><span>第三范式（3NF）</span></a></h4><p>第三范式要求表满足第二范式，并且所有非主属性都不传递依赖于主键，即非主属性之间不能有依赖关系。</p><h4 id="巴科斯-科德范式-bcnf" tabindex="-1"><a class="header-anchor" href="#巴科斯-科德范式-bcnf"><span>巴科斯-科德范式（BCNF）</span></a></h4><p>BCNF是比第三范式更强的范式，要求表中的每个函数依赖的决定因素都必须是候选键。</p><h4 id="第四范式-4nf" tabindex="-1"><a class="header-anchor" href="#第四范式-4nf"><span>第四范式（4NF）</span></a></h4><p>第四范式要求表满足BCNF，并且没有多值依赖。</p><h2 id="sql-基础-查询、插入、更新与删除" tabindex="-1"><a class="header-anchor" href="#sql-基础-查询、插入、更新与删除"><span>SQL 基础：查询、插入、更新与删除</span></a></h2><p>结构化查询语言（SQL）是关系型数据库的标准操作语言，它提供了丰富的语法来操作和管理数据库中的数据。</p><h3 id="数据查询-select" tabindex="-1"><a class="header-anchor" href="#数据查询-select"><span>数据查询（SELECT）</span></a></h3><p>SELECT语句用于从数据库中检索数据，是最常用的SQL语句之一。</p><h4 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column1, column2, ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> condition</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ORDER BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column_name;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用子句" tabindex="-1"><a class="header-anchor" href="#常用子句"><span>常用子句</span></a></h4><ul><li><strong>WHERE子句</strong>：用于过滤记录</li><li><strong>ORDER BY子句</strong>：用于对结果集进行排序</li><li><strong>GROUP BY子句</strong>：用于将结果集按一个或多个列进行分组</li><li><strong>HAVING子句</strong>：用于过滤分组后的结果</li></ul><h4 id="连接查询" tabindex="-1"><a class="header-anchor" href="#连接查询"><span>连接查询</span></a></h4><p>连接查询用于从多个表中检索数据：</p><ul><li><strong>内连接（INNER JOIN）</strong>：返回两个表中匹配的记录</li><li><strong>左连接（LEFT JOIN）</strong>：返回左表中的所有记录和右表中匹配的记录</li><li><strong>右连接（RIGHT JOIN）</strong>：返回右表中的所有记录和左表中匹配的记录</li><li><strong>全外连接（FULL OUTER JOIN）</strong>：返回两个表中的所有记录</li></ul><h3 id="数据插入-insert" tabindex="-1"><a class="header-anchor" href="#数据插入-insert"><span>数据插入（INSERT）</span></a></h3><p>INSERT语句用于向表中插入新记录。</p><h4 id="基本语法-1" tabindex="-1"><a class="header-anchor" href="#基本语法-1"><span>基本语法</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name (column1, column2, ...)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (value1, value2, ...);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="批量插入" tabindex="-1"><a class="header-anchor" href="#批量插入"><span>批量插入</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name (column1, column2, ...)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(value1, value2, ...),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(value1, value2, ...),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(value1, value2, ...);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据更新-update" tabindex="-1"><a class="header-anchor" href="#数据更新-update"><span>数据更新（UPDATE）</span></a></h3><p>UPDATE语句用于修改表中已存在的记录。</p><h4 id="基本语法-2" tabindex="-1"><a class="header-anchor" href="#基本语法-2"><span>基本语法</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> value1, column2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> value2, ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> condition;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据删除-delete" tabindex="-1"><a class="header-anchor" href="#数据删除-delete"><span>数据删除（DELETE）</span></a></h3><p>DELETE语句用于删除表中的记录。</p><h4 id="基本语法-3" tabindex="-1"><a class="header-anchor" href="#基本语法-3"><span>基本语法</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DELETE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> condition;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事务与并发控制-acid" tabindex="-1"><a class="header-anchor" href="#事务与并发控制-acid"><span>事务与并发控制（ACID）</span></a></h2><p>事务是数据库操作的基本单位，它将多个操作组合成一个逻辑工作单元。事务具有ACID特性，确保数据库的一致性和可靠性。</p><h3 id="原子性-atomicity" tabindex="-1"><a class="header-anchor" href="#原子性-atomicity"><span>原子性（Atomicity）</span></a></h3><p>原子性要求事务中的所有操作要么全部成功执行，要么全部不执行。如果事务中的任何操作失败，整个事务将被回滚到初始状态。</p><h3 id="一致性-consistency" tabindex="-1"><a class="header-anchor" href="#一致性-consistency"><span>一致性（Consistency）</span></a></h3><p>一致性确保事务执行前后，数据库从一个一致状态转换到另一个一致状态。事务不会破坏数据库的完整性约束。</p><h3 id="隔离性-isolation" tabindex="-1"><a class="header-anchor" href="#隔离性-isolation"><span>隔离性（Isolation）</span></a></h3><p>隔离性确保并发执行的事务不会相互干扰。每个事务在执行过程中都感觉不到其他事务的存在。</p><h4 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别"><span>隔离级别</span></a></h4><ul><li><strong>读未提交（Read Uncommitted）</strong>：最低隔离级别，可能出现脏读</li><li><strong>读已提交（Read Committed）</strong>：避免脏读，但可能出现不可重复读</li><li><strong>可重复读（Repeatable Read）</strong>：避免脏读和不可重复读，但可能出现幻读</li><li><strong>串行化（Serializable）</strong>：最高隔离级别，避免所有并发问题</li></ul><h3 id="持久性-durability" tabindex="-1"><a class="header-anchor" href="#持久性-durability"><span>持久性（Durability）</span></a></h3><p>持久性确保一旦事务提交，其对数据库的修改将永久保存，即使系统发生故障也不会丢失。</p><h3 id="并发控制机制" tabindex="-1"><a class="header-anchor" href="#并发控制机制"><span>并发控制机制</span></a></h3><p>为了实现事务的隔离性，数据库系统采用了多种并发控制机制：</p><h4 id="锁机制" tabindex="-1"><a class="header-anchor" href="#锁机制"><span>锁机制</span></a></h4><p>锁是最常用的并发控制机制，包括：</p><ul><li><strong>共享锁（S锁）</strong>：允许多个事务同时读取同一数据项</li><li><strong>排他锁（X锁）</strong>：只允许一个事务读取或修改数据项</li></ul><h4 id="时间戳机制" tabindex="-1"><a class="header-anchor" href="#时间戳机制"><span>时间戳机制</span></a></h4><p>为每个事务分配唯一的时间戳，根据时间戳决定事务的执行顺序。</p><h4 id="多版本并发控制-mvcc" tabindex="-1"><a class="header-anchor" href="#多版本并发控制-mvcc"><span>多版本并发控制（MVCC）</span></a></h4><p>通过维护数据的多个版本来实现并发控制，提高并发性能。</p><p>关系型数据库作为数据管理领域的基石技术，其理论基础和实践应用都十分成熟。从关系模型的数学基础到SQL语言的丰富功能，从数据库设计的规范化理论到事务的ACID特性，关系型数据库为数据的存储、管理和处理提供了完整而可靠的解决方案。</p><p>尽管近年来NoSQL等新兴技术不断涌现，但关系型数据库在需要强一致性、复杂查询和事务处理的场景中仍然不可替代。掌握关系型数据库的基础知识，对于任何从事数据相关工作的专业人士来说都是必不可少的技能。</p><p>随着技术的发展，关系型数据库也在不断演进，云原生数据库、分布式关系型数据库等新技术正在为传统的关系型数据库注入新的活力。理解这些基础概念，将有助于我们更好地适应和应用这些新技术。</p>`,90)])])}const d=s(t,[["render",l]]),o=JSON.parse('{"path":"/posts/data-management-storage/040-3-1-Relational-Database-Fundamentals.html","title":"关系型数据库基础：从理论到实践的核心概念","lang":"zh-CN","frontmatter":{"title":"关系型数据库基础：从理论到实践的核心概念","date":"2025-08-30T00:00:00.000Z","categories":["DataManagementStorage"],"tags":["data-management-storage"],"published":true,"description":"关系型数据库管理系统（Relational Database Management System，RDBMS）自20世纪70年代问世以来，一直是数据存储和管理领域的主流技术。从企业级应用到个人项目，从金融系统到社交媒体平台，关系型数据库以其严谨的理论基础、强大的数据一致性和丰富的功能特性，支撑着现代社会的大量数据处理需求。 关系型数据库的概念 关系型数...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关系型数据库基础：从理论到实践的核心概念\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T09:05:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/data-management-storage/040-3-1-Relational-Database-Fundamentals.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"关系型数据库基础：从理论到实践的核心概念"}],["meta",{"property":"og:description","content":"关系型数据库管理系统（Relational Database Management System，RDBMS）自20世纪70年代问世以来，一直是数据存储和管理领域的主流技术。从企业级应用到个人项目，从金融系统到社交媒体平台，关系型数据库以其严谨的理论基础、强大的数据一致性和丰富的功能特性，支撑着现代社会的大量数据处理需求。 关系型数据库的概念 关系型数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T09:05:07.000Z"}],["meta",{"property":"article:tag","content":"data-management-storage"}],["meta",{"property":"article:published_time","content":"2025-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T09:05:07.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1757235907000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":8,"words":2401},"filePathRelative":"posts/data-management-storage/040-3-1-Relational-Database-Fundamentals.md","excerpt":"<p>关系型数据库管理系统（Relational Database Management System，RDBMS）自20世纪70年代问世以来，一直是数据存储和管理领域的主流技术。从企业级应用到个人项目，从金融系统到社交媒体平台，关系型数据库以其严谨的理论基础、强大的数据一致性和丰富的功能特性，支撑着现代社会的大量数据处理需求。</p>\\n<h2>关系型数据库的概念</h2>\\n<p>关系型数据库是基于关系模型的数据库，由埃德加·科德（Edgar F. Codd）在1970年提出。关系模型使用数学概念来描述和操作数据，将数据组织成行和列的表格形式，这些表格被称为关系（Relation）。</p>\\n","autoDesc":true}');export{d as comp,o as data};
