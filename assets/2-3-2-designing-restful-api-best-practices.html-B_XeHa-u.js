import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as l}from"./app-DjwXz1dH.js";const n={};function r(t,i){return l(),e("div",null,[...i[0]||(i[0]=[a(`<p>设计高质量的RESTful API是构建现代Web服务的关键环节。良好的API设计不仅能够提高开发效率，还能提升系统的可维护性和可扩展性。本文将深入探讨RESTful API设计的最佳实践，从资源命名到错误处理，从版本控制到安全性，为您提供全面的指导。</p><h2 id="资源设计原则" tabindex="-1"><a class="header-anchor" href="#资源设计原则"><span>资源设计原则</span></a></h2><h3 id="资源命名规范" tabindex="-1"><a class="header-anchor" href="#资源命名规范"><span>资源命名规范</span></a></h3><ol><li><p><strong>使用名词而非动词</strong><br> 资源应该是名词，表示系统中的实体。例如，使用<code>/users</code>而不是<code>/getUsers</code>。</p></li><li><p><strong>使用复数形式</strong><br> 推荐使用复数形式表示资源集合，如<code>/users</code>而不是<code>/user</code>。</p></li><li><p><strong>使用连字符分隔单词</strong><br> 对于多单词的资源名称，使用连字符分隔，如<code>/user-profiles</code>而不是<code>/user_profiles</code>或<code>/userProfiles</code>。</p></li><li><p><strong>使用小写字母</strong><br> 统一使用小写字母，避免大小写混淆。</p></li></ol><h3 id="uri设计原则" tabindex="-1"><a class="header-anchor" href="#uri设计原则"><span>URI设计原则</span></a></h3><ol><li><p><strong>层级结构表示资源关系</strong><br> 使用层级结构表示资源之间的关系，如<code>/users/123/orders</code>表示用户123的订单。</p></li><li><p><strong>避免深层嵌套</strong><br> 避免过深的URI层级，通常不超过3层。对于复杂的关系，可以考虑使用查询参数。</p></li><li><p><strong>使用查询参数进行过滤、排序和分页</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>GET /users?role=admin&amp;sort=name&amp;page=2&amp;size=20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>避免在URI中暴露实现细节</strong><br> URI应该表示资源，而不是操作或实现细节。</p></li></ol><h3 id="资源操作设计" tabindex="-1"><a class="header-anchor" href="#资源操作设计"><span>资源操作设计</span></a></h3><ol><li><p><strong>正确使用HTTP方法</strong></p><ul><li>GET：获取资源（安全且幂等）</li><li>POST：创建资源或执行不幂等的操作</li><li>PUT：更新资源或创建已知URI的资源（幂等）</li><li>PATCH：部分更新资源</li><li>DELETE：删除资源（幂等）</li></ul></li><li><p><strong>合理设计资源关系</strong><br> 对于复杂的资源关系，可以考虑以下方式：</p><ul><li>子资源：<code>/users/123/orders</code></li><li>关联资源：<code>/users/123/relationships/orders</code></li><li>查询参数：<code>/orders?userId=123</code></li></ul></li></ol><h2 id="数据表示与格式" tabindex="-1"><a class="header-anchor" href="#数据表示与格式"><span>数据表示与格式</span></a></h2><h3 id="媒体类型" tabindex="-1"><a class="header-anchor" href="#媒体类型"><span>媒体类型</span></a></h3><ol><li><p><strong>使用标准媒体类型</strong></p><ul><li><code>application/json</code>：JSON格式</li><li><code>application/xml</code>：XML格式</li><li><code>application/hal+json</code>：HAL格式（支持HATEOAS）</li></ul></li><li><p><strong>自定义媒体类型</strong><br> 对于特定应用，可以定义自定义媒体类型：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>application/vnd.myapp.v1+json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="数据格式规范" tabindex="-1"><a class="header-anchor" href="#数据格式规范"><span>数据格式规范</span></a></h3><ol><li><p><strong>统一数据格式</strong><br> 在整个API中保持数据格式的一致性，包括日期格式、数字格式等。</p></li><li><p><strong>合理的数据结构</strong></p><ul><li>使用嵌套对象表示复杂数据</li><li>使用数组表示集合</li><li>提供默认值和可选字段</li></ul></li><li><p><strong>字段命名规范</strong></p><ul><li>使用小写字母和下划线分隔单词（snake_case）</li><li>或使用小写字母和驼峰命名（camelCase），但要保持一致</li></ul></li></ol><h3 id="数据验证" tabindex="-1"><a class="header-anchor" href="#数据验证"><span>数据验证</span></a></h3><ol><li><p><strong>输入验证</strong></p><ul><li>验证必填字段</li><li>验证数据类型和格式</li><li>验证数据范围和长度</li></ul></li><li><p><strong>输出过滤</strong></p><ul><li>允许客户端指定返回字段</li><li>提供默认字段集</li><li>支持字段扩展</li></ul></li></ol><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><h3 id="统一错误响应格式" tabindex="-1"><a class="header-anchor" href="#统一错误响应格式"><span>统一错误响应格式</span></a></h3><p>设计统一的错误响应格式，包含以下信息：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;error&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;code&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;VALIDATION_ERROR&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;message&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;输入数据验证失败&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;details&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;field&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;email&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;message&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;邮箱格式不正确&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="合理使用http状态码" tabindex="-1"><a class="header-anchor" href="#合理使用http状态码"><span>合理使用HTTP状态码</span></a></h3><ol><li><p><strong>2xx（成功）</strong></p><ul><li>200 OK：请求成功</li><li>201 Created：资源创建成功</li><li>204 No Content：请求成功但无返回内容</li></ul></li><li><p><strong>4xx（客户端错误）</strong></p><ul><li>400 Bad Request：请求格式错误</li><li>401 Unauthorized：未授权</li><li>403 Forbidden：禁止访问</li><li>404 Not Found：资源不存在</li><li>422 Unprocessable Entity：请求格式正确但语义错误</li></ul></li><li><p><strong>5xx（服务器错误）</strong></p><ul><li>500 Internal Server Error：服务器内部错误</li><li>502 Bad Gateway：网关错误</li><li>503 Service Unavailable：服务不可用</li></ul></li></ol><h3 id="错误信息设计" tabindex="-1"><a class="header-anchor" href="#错误信息设计"><span>错误信息设计</span></a></h3><ol><li><p><strong>用户友好的错误信息</strong><br> 错误信息应该清晰、易懂，避免技术术语。</p></li><li><p><strong>开发人员友好的详细信息</strong><br> 提供足够的技术细节帮助开发人员理解和解决问题。</p></li><li><p><strong>安全性考虑</strong><br> 避免在错误信息中暴露敏感信息，如数据库结构、内部实现细节等。</p></li></ol><h2 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制"><span>版本控制</span></a></h2><h3 id="版本控制策略" tabindex="-1"><a class="header-anchor" href="#版本控制策略"><span>版本控制策略</span></a></h3><ol><li><p><strong>URI版本控制</strong><br> 在URI中包含版本信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>GET /api/v1/users</span></span>
<span class="line"><span>GET /api/v2/users</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>请求头版本控制</strong><br> 通过请求头指定版本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Accept: application/vnd.myapp.v1+json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>参数版本控制</strong><br> 通过查询参数指定版本：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>GET /api/users?version=1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="版本兼容性" tabindex="-1"><a class="header-anchor" href="#版本兼容性"><span>版本兼容性</span></a></h3><ol><li><p><strong>向后兼容</strong><br> 新版本应该兼容旧版本的API，避免破坏现有客户端。</p></li><li><p><strong>废弃策略</strong><br> 对于废弃的API，应该：</p><ul><li>提供明确的废弃时间表</li><li>在响应中包含废弃警告</li><li>提供迁移指南</li></ul></li></ol><h2 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性"><span>安全性</span></a></h2><h3 id="身份验证" tabindex="-1"><a class="header-anchor" href="#身份验证"><span>身份验证</span></a></h3><ol><li><p><strong>使用标准身份验证机制</strong></p><ul><li>OAuth2：适用于第三方应用集成</li><li>JWT：适用于无状态身份验证</li><li>API Key：适用于服务器到服务器通信</li></ul></li><li><p><strong>安全传输</strong><br> 使用HTTPS加密所有API通信，防止数据被窃听或篡改。</p></li></ol><h3 id="授权" tabindex="-1"><a class="header-anchor" href="#授权"><span>授权</span></a></h3><ol><li><p><strong>基于角色的访问控制（RBAC）</strong><br> 根据用户角色控制资源访问权限。</p></li><li><p><strong>基于资源的访问控制</strong><br> 根据具体资源控制访问权限。</p></li><li><p><strong>细粒度权限控制</strong><br> 控制用户对资源的具体操作权限。</p></li></ol><h3 id="输入验证与防护" tabindex="-1"><a class="header-anchor" href="#输入验证与防护"><span>输入验证与防护</span></a></h3><ol><li><p><strong>防止注入攻击</strong></p><ul><li>SQL注入</li><li>XSS攻击</li><li>命令注入</li></ul></li><li><p><strong>速率限制</strong><br> 实施API调用速率限制，防止滥用。</p></li><li><p><strong>数据验证</strong><br> 对所有输入数据进行严格验证。</p></li></ol><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化"><span>性能优化</span></a></h2><h3 id="缓存策略" tabindex="-1"><a class="header-anchor" href="#缓存策略"><span>缓存策略</span></a></h3><ol><li><p><strong>HTTP缓存</strong><br> 使用适当的HTTP缓存头：</p><ul><li>Cache-Control</li><li>Expires</li><li>ETag</li></ul></li><li><p><strong>应用层缓存</strong></p><ul><li>缓存计算结果</li><li>缓存数据库查询结果</li><li>使用分布式缓存</li></ul></li></ol><h3 id="分页与过滤" tabindex="-1"><a class="header-anchor" href="#分页与过滤"><span>分页与过滤</span></a></h3><ol><li><p><strong>分页实现</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>GET /users?page=2&amp;size=20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>过滤与排序</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>GET /users?role=admin&amp;sort=-created_at,name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="压缩与优化" tabindex="-1"><a class="header-anchor" href="#压缩与优化"><span>压缩与优化</span></a></h3><ol><li><p><strong>数据压缩</strong><br> 使用GZIP或Brotli压缩响应数据。</p></li><li><p><strong>字段选择</strong><br> 允许客户端指定需要的字段，减少数据传输量：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>GET /users?fields=id,name,email</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="文档与测试" tabindex="-1"><a class="header-anchor" href="#文档与测试"><span>文档与测试</span></a></h2><h3 id="api文档" tabindex="-1"><a class="header-anchor" href="#api文档"><span>API文档</span></a></h3><ol><li><p><strong>使用标准文档格式</strong></p><ul><li>OpenAPI（Swagger）</li><li>RAML</li><li>API Blueprint</li></ul></li><li><p><strong>自动生成文档</strong><br> 通过代码注释自动生成API文档。</p></li><li><p><strong>交互式文档</strong><br> 提供可交互的API文档，方便开发者测试。</p></li></ol><h3 id="api测试" tabindex="-1"><a class="header-anchor" href="#api测试"><span>API测试</span></a></h3><ol><li><p><strong>单元测试</strong><br> 对API的各个功能进行单元测试。</p></li><li><p><strong>集成测试</strong><br> 测试API与其他服务的集成。</p></li><li><p><strong>性能测试</strong><br> 测试API在高并发场景下的性能表现。</p></li></ol><h2 id="监控与日志" tabindex="-1"><a class="header-anchor" href="#监控与日志"><span>监控与日志</span></a></h2><h3 id="监控指标" tabindex="-1"><a class="header-anchor" href="#监控指标"><span>监控指标</span></a></h3><ol><li><p><strong>请求指标</strong></p><ul><li>请求量</li><li>响应时间</li><li>错误率</li></ul></li><li><p><strong>业务指标</strong></p><ul><li>API调用分布</li><li>用户行为分析</li></ul></li></ol><h3 id="日志记录" tabindex="-1"><a class="header-anchor" href="#日志记录"><span>日志记录</span></a></h3><ol><li><p><strong>结构化日志</strong><br> 使用结构化日志格式，便于分析和查询。</p></li><li><p><strong>日志级别</strong><br> 合理设置日志级别，避免日志过多或过少。</p></li><li><p><strong>敏感信息处理</strong><br> 避免在日志中记录敏感信息，如密码、密钥等。</p></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>设计高质量的RESTful API需要综合考虑多个方面，从资源设计到安全性，从性能优化到文档测试。遵循这些最佳实践，可以帮助我们构建出易于使用、安全可靠、高性能的Web服务。</p><p>在实际项目中，我们需要根据具体需求和约束条件，灵活应用这些最佳实践。同时，随着技术的发展和业务的变化，API设计也需要不断演进和优化。</p><p>在后续章节中，我们将探讨其他服务间通信方式，如gRPC、消息队列等，并比较它们与RESTful API的优劣，帮助您在实际项目中做出明智的技术选择。</p>`,56)])])}const h=s(n,[["render",r]]),d=JSON.parse('{"path":"/posts/communication/2-3-2-designing-restful-api-best-practices.html","title":"设计RESTful API最佳实践：构建高质量Web服务的指南","lang":"zh-CN","frontmatter":{"title":"设计RESTful API最佳实践：构建高质量Web服务的指南","date":"2025-08-31T00:00:00.000Z","categories":["ServiceCommunication"],"tags":["communication"],"published":true,"description":"设计高质量的RESTful API是构建现代Web服务的关键环节。良好的API设计不仅能够提高开发效率，还能提升系统的可维护性和可扩展性。本文将深入探讨RESTful API设计的最佳实践，从资源命名到错误处理，从版本控制到安全性，为您提供全面的指导。 资源设计原则 资源命名规范 使用名词而非动词 资源应该是名词，表示系统中的实体。例如，使用/user...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计RESTful API最佳实践：构建高质量Web服务的指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-01T13:27:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/communication/2-3-2-designing-restful-api-best-practices.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"设计RESTful API最佳实践：构建高质量Web服务的指南"}],["meta",{"property":"og:description","content":"设计高质量的RESTful API是构建现代Web服务的关键环节。良好的API设计不仅能够提高开发效率，还能提升系统的可维护性和可扩展性。本文将深入探讨RESTful API设计的最佳实践，从资源命名到错误处理，从版本控制到安全性，为您提供全面的指导。 资源设计原则 资源命名规范 使用名词而非动词 资源应该是名词，表示系统中的实体。例如，使用/user..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T13:27:06.000Z"}],["meta",{"property":"article:tag","content":"communication"}],["meta",{"property":"article:published_time","content":"2025-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-01T13:27:06.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1756733226000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":6.4,"words":1921},"filePathRelative":"posts/communication/2-3-2-designing-restful-api-best-practices.md","excerpt":"<p>设计高质量的RESTful API是构建现代Web服务的关键环节。良好的API设计不仅能够提高开发效率，还能提升系统的可维护性和可扩展性。本文将深入探讨RESTful API设计的最佳实践，从资源命名到错误处理，从版本控制到安全性，为您提供全面的指导。</p>\\n<h2>资源设计原则</h2>\\n<h3>资源命名规范</h3>\\n<ol>\\n<li>\\n<p><strong>使用名词而非动词</strong><br>\\n资源应该是名词，表示系统中的实体。例如，使用<code>/users</code>而不是<code>/getUsers</code>。</p>\\n</li>\\n<li>\\n<p><strong>使用复数形式</strong><br>\\n推荐使用复数形式表示资源集合，如<code>/users</code>而不是<code>/user</code>。</p>\\n</li>\\n<li>\\n<p><strong>使用连字符分隔单词</strong><br>\\n对于多单词的资源名称，使用连字符分隔，如<code>/user-profiles</code>而不是<code>/user_profiles</code>或<code>/userProfiles</code>。</p>\\n</li>\\n<li>\\n<p><strong>使用小写字母</strong><br>\\n统一使用小写字母，避免大小写混淆。</p>\\n</li>\\n</ol>","autoDesc":true}');export{h as comp,d as data};
