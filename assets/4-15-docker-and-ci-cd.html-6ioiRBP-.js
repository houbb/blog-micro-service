import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as r,o as c}from"./app-BS2-Vf28.js";const a={};function i(n,e){return c(),o("div",null,[...e[0]||(e[0]=[r('<h2 id="第15章-docker-与-ci-cd" tabindex="-1"><a class="header-anchor" href="#第15章-docker-与-ci-cd"><span>第15章：Docker 与 CI/CD</span></a></h2><h3 id="将-docker-集成到-ci-cd-流水线" tabindex="-1"><a class="header-anchor" href="#将-docker-集成到-ci-cd-流水线"><span>将 Docker 集成到 CI/CD 流水线</span></a></h3><p>持续集成和持续部署（CI/CD）是现代软件开发的重要实践，而 Docker 作为容器化技术的代表，为 CI/CD 流水线提供了标准化的构建、测试和部署环境。通过将 Docker 集成到 CI/CD 流水线中，团队可以实现更快速、更可靠的软件交付。</p><h3 id="使用-docker-部署自动化测试环境" tabindex="-1"><a class="header-anchor" href="#使用-docker-部署自动化测试环境"><span>使用 Docker 部署自动化测试环境</span></a></h3><p>Docker 使得创建一致、可重现的测试环境变得简单。通过容器化测试环境，团队可以确保在不同阶段（开发、测试、生产）使用相同的环境配置，减少&quot;在我机器上能运行&quot;的问题。</p><h3 id="配置与管理-ci-cd-工具链" tabindex="-1"><a class="header-anchor" href="#配置与管理-ci-cd-工具链"><span>配置与管理 CI/CD 工具链</span></a></h3><p>现代 CI/CD 工具链（如 Jenkins、GitLab CI、GitHub Actions 等）都提供了对 Docker 的原生支持。通过合理配置这些工具，可以充分发挥 Docker 在自动化构建、测试和部署中的优势。</p><p>通过本章的学习，您将深入了解如何将 Docker 集成到 CI/CD 流水线中，掌握使用 Docker 部署自动化测试环境的方法，以及如何配置和管理主流的 CI/CD 工具链。</p>',8)])])}const C=t(a,[["render",i]]),D=JSON.parse('{"path":"/posts/container-docker/4-15-docker-and-ci-cd.html","title":"Docker and CI/CD - Streamlining Software Delivery with Containerization","lang":"zh-CN","frontmatter":{"title":"Docker and CI/CD - Streamlining Software Delivery with Containerization","date":"2025-08-31T00:00:00.000Z","categories":["Docker"],"tags":["container-docker"],"published":true,"description":"第15章：Docker 与 CI/CD 将 Docker 集成到 CI/CD 流水线 持续集成和持续部署（CI/CD）是现代软件开发的重要实践，而 Docker 作为容器化技术的代表，为 CI/CD 流水线提供了标准化的构建、测试和部署环境。通过将 Docker 集成到 CI/CD 流水线中，团队可以实现更快速、更可靠的软件交付。 使用 Docker ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker and CI/CD - Streamlining Software Delivery with Containerization\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-01T13:27:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/container-docker/4-15-docker-and-ci-cd.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Docker and CI/CD - Streamlining Software Delivery with Containerization"}],["meta",{"property":"og:description","content":"第15章：Docker 与 CI/CD 将 Docker 集成到 CI/CD 流水线 持续集成和持续部署（CI/CD）是现代软件开发的重要实践，而 Docker 作为容器化技术的代表，为 CI/CD 流水线提供了标准化的构建、测试和部署环境。通过将 Docker 集成到 CI/CD 流水线中，团队可以实现更快速、更可靠的软件交付。 使用 Docker ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T13:27:06.000Z"}],["meta",{"property":"article:tag","content":"container-docker"}],["meta",{"property":"article:published_time","content":"2025-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-01T13:27:06.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1756733226000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":1.07,"words":321},"filePathRelative":"posts/container-docker/4-15-docker-and-ci-cd.md","excerpt":"<h2>第15章：Docker 与 CI/CD</h2>\\n<h3>将 Docker 集成到 CI/CD 流水线</h3>\\n<p>持续集成和持续部署（CI/CD）是现代软件开发的重要实践，而 Docker 作为容器化技术的代表，为 CI/CD 流水线提供了标准化的构建、测试和部署环境。通过将 Docker 集成到 CI/CD 流水线中，团队可以实现更快速、更可靠的软件交付。</p>\\n<h3>使用 Docker 部署自动化测试环境</h3>\\n<p>Docker 使得创建一致、可重现的测试环境变得简单。通过容器化测试环境，团队可以确保在不同阶段（开发、测试、生产）使用相同的环境配置，减少\\"在我机器上能运行\\"的问题。</p>","autoDesc":true}');export{C as comp,D as data};
