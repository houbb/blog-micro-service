import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as t,o as c}from"./app-BcGQ-_EK.js";const n={};function a(i,e){return c(),r("div",null,[...e[0]||(e[0]=[t('<h2 id="第3章-docker-架构与基本概念" tabindex="-1"><a class="header-anchor" href="#第3章-docker-架构与基本概念"><span>第3章：Docker 架构与基本概念</span></a></h2><h3 id="docker-引擎与容器" tabindex="-1"><a class="header-anchor" href="#docker-引擎与容器"><span>Docker 引擎与容器</span></a></h3><p>Docker 引擎是 Docker 的核心组件，负责构建、运行和管理容器。它采用客户端-服务器（C/S）架构，由多个组件协同工作。理解 Docker 引擎的架构对于深入掌握 Docker 的工作原理至关重要。</p><p>Docker 引擎主要包含以下组件：</p><ul><li><strong>Docker Daemon</strong>：后台运行的守护进程，负责管理 Docker 对象</li><li><strong>Docker Client</strong>：用户与 Docker 交互的命令行工具</li><li><strong>Docker API</strong>：REST API，供程序与 Docker Daemon 通信</li><li><strong>Docker Objects</strong>：包括镜像、容器、网络、卷等</li></ul><h3 id="镜像、容器、仓库与-dockerfile" tabindex="-1"><a class="header-anchor" href="#镜像、容器、仓库与-dockerfile"><span>镜像、容器、仓库与 Dockerfile</span></a></h3><p>Docker 的核心概念包括镜像、容器、仓库和 Dockerfile，它们构成了 Docker 生态系统的基础。</p><p>**镜像（Image）**是只读的模板，包含创建 Docker 容器的指令。镜像是分层构建的，每一层代表镜像的一个变更。</p><p>**容器（Container）**是镜像的运行实例，可以被启动、停止、重启和删除。每个容器都是相互隔离且安全的平台。</p><p>**仓库（Registry）**是存储和分发 Docker 镜像的服务。Docker Hub 是默认的公共仓库，用户也可以搭建私有仓库。</p><p><strong>Dockerfile</strong>是一个文本文件，包含一系列指令，用于自动化构建镜像。</p><h3 id="docker-仓库与镜像拉取" tabindex="-1"><a class="header-anchor" href="#docker-仓库与镜像拉取"><span>Docker 仓库与镜像拉取</span></a></h3><p>Docker 仓库是 Docker 镜像的存储和分发系统。了解如何使用仓库以及如何高效地拉取镜像是使用 Docker 的重要技能。</p><p>本章将深入探讨 Docker 的架构设计、核心概念以及它们之间的关系，为后续章节的学习奠定坚实的基础。</p>',14)])])}const k=o(n,[["render",a]]),D=JSON.parse('{"path":"/posts/container-docker/013-1-3-docker-architecture-and-basic-concepts.html","title":"Docker 架构与基本概念","lang":"zh-CN","frontmatter":{"title":"Docker 架构与基本概念","date":"2025-08-30T00:00:00.000Z","categories":["Docker"],"tags":["container-docker"],"published":true,"description":"第3章：Docker 架构与基本概念 Docker 引擎与容器 Docker 引擎是 Docker 的核心组件，负责构建、运行和管理容器。它采用客户端-服务器（C/S）架构，由多个组件协同工作。理解 Docker 引擎的架构对于深入掌握 Docker 的工作原理至关重要。 Docker 引擎主要包含以下组件： Docker Daemon：后台运行的守护...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 架构与基本概念\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T09:05:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/container-docker/013-1-3-docker-architecture-and-basic-concepts.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Docker 架构与基本概念"}],["meta",{"property":"og:description","content":"第3章：Docker 架构与基本概念 Docker 引擎与容器 Docker 引擎是 Docker 的核心组件，负责构建、运行和管理容器。它采用客户端-服务器（C/S）架构，由多个组件协同工作。理解 Docker 引擎的架构对于深入掌握 Docker 的工作原理至关重要。 Docker 引擎主要包含以下组件： Docker Daemon：后台运行的守护..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T09:05:07.000Z"}],["meta",{"property":"article:tag","content":"container-docker"}],["meta",{"property":"article:published_time","content":"2025-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T09:05:07.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1757235907000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":1.46,"words":437},"filePathRelative":"posts/container-docker/013-1-3-docker-architecture-and-basic-concepts.md","excerpt":"<h2>第3章：Docker 架构与基本概念</h2>\\n<h3>Docker 引擎与容器</h3>\\n<p>Docker 引擎是 Docker 的核心组件，负责构建、运行和管理容器。它采用客户端-服务器（C/S）架构，由多个组件协同工作。理解 Docker 引擎的架构对于深入掌握 Docker 的工作原理至关重要。</p>\\n<p>Docker 引擎主要包含以下组件：</p>\\n<ul>\\n<li><strong>Docker Daemon</strong>：后台运行的守护进程，负责管理 Docker 对象</li>\\n<li><strong>Docker Client</strong>：用户与 Docker 交互的命令行工具</li>\\n<li><strong>Docker API</strong>：REST API，供程序与 Docker Daemon 通信</li>\\n<li><strong>Docker Objects</strong>：包括镜像、容器、网络、卷等</li>\\n</ul>","autoDesc":true}');export{k as comp,D as data};
