import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-DjwXz1dH.js";const t={};function l(h,s){return e(),a("div",null,[...s[0]||(s[0]=[n(`<p>在现代Web开发和分布式系统中，选择合适的通信协议对于系统性能、用户体验和开发复杂度有着重要影响。HTTP作为Web的基础协议，已经服务了数十年，而WebSockets作为一种相对较新的技术，为实时双向通信提供了全新的解决方案。本文将深入对比WebSockets与HTTP协议在多个维度上的差异，帮助开发者更好地理解两种技术的特点和适用场景。</p><h2 id="协议基础对比" tabindex="-1"><a class="header-anchor" href="#协议基础对比"><span>协议基础对比</span></a></h2><h3 id="http协议" tabindex="-1"><a class="header-anchor" href="#http协议"><span>HTTP协议</span></a></h3><p>HTTP（HyperText Transfer Protocol）是一种应用层协议，基于请求-响应模型。客户端发送请求到服务器，服务器处理请求并返回响应，然后连接关闭。HTTP/1.1引入了持久连接，但仍然保持请求-响应的基本模式。</p><h4 id="核心特点" tabindex="-1"><a class="header-anchor" href="#核心特点"><span>核心特点</span></a></h4><ul><li><strong>无状态</strong>：每个请求都是独立的，服务器不保存客户端状态</li><li><strong>请求-响应</strong>：客户端发起请求，服务器返回响应</li><li><strong>单向通信</strong>：服务器无法主动向客户端推送数据</li><li><strong>头部开销</strong>：每个请求都包含完整的HTTP头部</li></ul><h3 id="websockets协议" tabindex="-1"><a class="header-anchor" href="#websockets协议"><span>WebSockets协议</span></a></h3><p>WebSockets是一种全双工通信协议，允许客户端和服务器在单个TCP连接上进行双向数据传输。连接一旦建立，双方都可以随时发送数据，而不需要等待对方的请求或响应。</p><h4 id="核心特点-1" tabindex="-1"><a class="header-anchor" href="#核心特点-1"><span>核心特点</span></a></h4><ul><li><strong>全双工</strong>：客户端和服务器可以同时发送和接收数据</li><li><strong>持久连接</strong>：连接建立后保持打开状态</li><li><strong>低延迟</strong>：数据传输开销小，延迟低</li><li><strong>双向通信</strong>：服务器可以主动向客户端推送数据</li></ul><h2 id="连接特性对比" tabindex="-1"><a class="header-anchor" href="#连接特性对比"><span>连接特性对比</span></a></h2><h3 id="连接建立过程" tabindex="-1"><a class="header-anchor" href="#连接建立过程"><span>连接建立过程</span></a></h3><h4 id="http连接" tabindex="-1"><a class="header-anchor" href="#http连接"><span>HTTP连接</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>1. 客户端 -&gt; 服务器: TCP连接建立</span></span>
<span class="line"><span>2. 客户端 -&gt; 服务器: HTTP请求</span></span>
<span class="line"><span>3. 服务器 -&gt; 客户端: HTTP响应</span></span>
<span class="line"><span>4. 连接关闭（除非使用持久连接）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="websockets连接" tabindex="-1"><a class="header-anchor" href="#websockets连接"><span>WebSockets连接</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>1. 客户端 -&gt; 服务器: TCP连接建立</span></span>
<span class="line"><span>2. 客户端 -&gt; 服务器: 协议升级请求（HTTP握手）</span></span>
<span class="line"><span>3. 服务器 -&gt; 客户端: 协议升级响应</span></span>
<span class="line"><span>4. 客户端 &lt;-&gt; 服务器: 双向数据传输</span></span>
<span class="line"><span>5. 任一方 -&gt; 另一方: 连接关闭</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连接开销" tabindex="-1"><a class="header-anchor" href="#连接开销"><span>连接开销</span></a></h3><table><thead><tr><th>特性</th><th>HTTP</th><th>WebSockets</th></tr></thead><tbody><tr><td>连接建立开销</td><td>高（TCP三次握手 + HTTP请求）</td><td>高（首次握手）</td></tr><tr><td>后续请求开销</td><td>高（完整HTTP头部）</td><td>低（轻量级帧结构）</td></tr><tr><td>连接保持开销</td><td>无（连接即关闭）</td><td>低（少量心跳包）</td></tr></tbody></table><h3 id="连接复用" tabindex="-1"><a class="header-anchor" href="#连接复用"><span>连接复用</span></a></h3><h4 id="http-1-1持久连接" tabindex="-1"><a class="header-anchor" href="#http-1-1持久连接"><span>HTTP/1.1持久连接</span></a></h4><ul><li>允许在同一TCP连接上发送多个请求</li><li>请求仍然需要排队处理</li><li>连接最终会关闭</li></ul><h4 id="http-2多路复用" tabindex="-1"><a class="header-anchor" href="#http-2多路复用"><span>HTTP/2多路复用</span></a></h4><ul><li>允许在同一连接上并行处理多个请求</li><li>减少了连接建立的开销</li><li>仍然基于请求-响应模型</li></ul><h4 id="websockets持久连接" tabindex="-1"><a class="header-anchor" href="#websockets持久连接"><span>WebSockets持久连接</span></a></h4><ul><li>连接一旦建立就保持打开</li><li>支持真正的并行双向通信</li><li>连接可以长时间保持</li></ul><h2 id="数据传输对比" tabindex="-1"><a class="header-anchor" href="#数据传输对比"><span>数据传输对比</span></a></h2><h3 id="传输方向" tabindex="-1"><a class="header-anchor" href="#传输方向"><span>传输方向</span></a></h3><h4 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>HTTP</span></a></h4><ul><li><strong>单向</strong>：客户端发起请求，服务器返回响应</li><li><strong>被动</strong>：服务器无法主动向客户端发送数据</li><li><strong>轮询</strong>：客户端需要定期请求更新</li></ul><h4 id="websockets" tabindex="-1"><a class="header-anchor" href="#websockets"><span>WebSockets</span></a></h4><ul><li><strong>双向</strong>：客户端和服务器都可以主动发送数据</li><li><strong>主动</strong>：服务器可以实时推送数据给客户端</li><li><strong>实时</strong>：数据可以立即传输</li></ul><h3 id="数据格式" tabindex="-1"><a class="header-anchor" href="#数据格式"><span>数据格式</span></a></h3><h4 id="http-1" tabindex="-1"><a class="header-anchor" href="#http-1"><span>HTTP</span></a></h4><ul><li><strong>文本格式</strong>：主要传输文本数据（HTML、JSON、XML等）</li><li><strong>二进制支持</strong>：通过特定Content-Type支持二进制数据</li><li><strong>头部信息</strong>：每个请求都包含完整的HTTP头部</li></ul><h4 id="websockets-1" tabindex="-1"><a class="header-anchor" href="#websockets-1"><span>WebSockets</span></a></h4><ul><li><strong>文本和二进制</strong>：原生支持文本和二进制数据传输</li><li><strong>帧结构</strong>：使用轻量级的帧结构传输数据</li><li><strong>最小头部</strong>：帧头部信息极少</li></ul><h3 id="传输效率" tabindex="-1"><a class="header-anchor" href="#传输效率"><span>传输效率</span></a></h3><h4 id="http传输效率" tabindex="-1"><a class="header-anchor" href="#http传输效率"><span>HTTP传输效率</span></a></h4><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-http"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /api/data </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">User-Agent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Mozilla/5.0</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Accept</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application/json</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Authorization</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Bearer token123</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application/json</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Length</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> OK</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application/json</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Length</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 100</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Cache-Control</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> no-cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">&quot;data&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;response_data&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次请求都需要传输约300-500字节的头部信息。</p><h4 id="websockets传输效率" tabindex="-1"><a class="header-anchor" href="#websockets传输效率"><span>WebSockets传输效率</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Frame Header: 2-10 bytes</span></span>
<span class="line"><span>Payload: {&quot;data&quot;: &quot;response_data&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>数据传输开销极小，通常只有几个字节的帧头部。</p><h2 id="应用场景对比" tabindex="-1"><a class="header-anchor" href="#应用场景对比"><span>应用场景对比</span></a></h2><h3 id="http适用场景" tabindex="-1"><a class="header-anchor" href="#http适用场景"><span>HTTP适用场景</span></a></h3><h4 id="传统的web页面请求" tabindex="-1"><a class="header-anchor" href="#传统的web页面请求"><span>传统的Web页面请求</span></a></h4><ul><li>加载HTML页面</li><li>获取CSS、JavaScript、图片等静态资源</li><li>表单提交</li></ul><h4 id="restful-api调用" tabindex="-1"><a class="header-anchor" href="#restful-api调用"><span>RESTful API调用</span></a></h4><ul><li>CRUD操作</li><li>数据查询和更新</li><li>身份验证和授权</li></ul><h4 id="文件传输" tabindex="-1"><a class="header-anchor" href="#文件传输"><span>文件传输</span></a></h4><ul><li>文件上传和下载</li><li>大数据流传输</li></ul><h4 id="不需要实时交互的场景" tabindex="-1"><a class="header-anchor" href="#不需要实时交互的场景"><span>不需要实时交互的场景</span></a></h4><ul><li>批量数据处理</li><li>定时任务执行</li></ul><h3 id="websockets适用场景" tabindex="-1"><a class="header-anchor" href="#websockets适用场景"><span>WebSockets适用场景</span></a></h3><h4 id="实时聊天应用" tabindex="-1"><a class="header-anchor" href="#实时聊天应用"><span>实时聊天应用</span></a></h4><ul><li>用户间实时消息传递</li><li>在线状态同步</li><li>群聊功能</li></ul><h4 id="在线游戏" tabindex="-1"><a class="header-anchor" href="#在线游戏"><span>在线游戏</span></a></h4><ul><li>玩家位置实时同步</li><li>游戏状态更新</li><li>实时交互</li></ul><h4 id="实时数据监控" tabindex="-1"><a class="header-anchor" href="#实时数据监控"><span>实时数据监控</span></a></h4><ul><li>系统性能监控</li><li>业务指标实时展示</li><li>日志实时查看</li></ul><h4 id="协作应用" tabindex="-1"><a class="header-anchor" href="#协作应用"><span>协作应用</span></a></h4><ul><li>实时协作编辑</li><li>在线白板</li><li>共享文档</li></ul><h4 id="实时通知系统" tabindex="-1"><a class="header-anchor" href="#实时通知系统"><span>实时通知系统</span></a></h4><ul><li>系统告警推送</li><li>消息通知</li><li>状态更新</li></ul><h2 id="性能对比" tabindex="-1"><a class="header-anchor" href="#性能对比"><span>性能对比</span></a></h2><h3 id="延迟对比" tabindex="-1"><a class="header-anchor" href="#延迟对比"><span>延迟对比</span></a></h3><h4 id="http延迟" tabindex="-1"><a class="header-anchor" href="#http延迟"><span>HTTP延迟</span></a></h4><ul><li><strong>连接建立延迟</strong>：TCP三次握手 + HTTP请求</li><li><strong>请求处理延迟</strong>：服务器处理时间</li><li><strong>响应传输延迟</strong>：数据传输时间</li><li><strong>连接关闭延迟</strong>：连接关闭时间</li></ul><h4 id="websockets延迟" tabindex="-1"><a class="header-anchor" href="#websockets延迟"><span>WebSockets延迟</span></a></h4><ul><li><strong>初始握手延迟</strong>：仅在连接建立时发生</li><li><strong>数据传输延迟</strong>：极低，只有网络传输时间</li><li><strong>无连接建立/关闭开销</strong>：连接保持打开</li></ul><h3 id="吞吐量对比" tabindex="-1"><a class="header-anchor" href="#吞吐量对比"><span>吞吐量对比</span></a></h3><h4 id="http吞吐量限制" tabindex="-1"><a class="header-anchor" href="#http吞吐量限制"><span>HTTP吞吐量限制</span></a></h4><ul><li>每个请求都需要完整的HTTP头部</li><li>连接建立和关闭的开销</li><li>浏览器对同一域名的并发连接数限制</li></ul><h4 id="websockets吞吐量优势" tabindex="-1"><a class="header-anchor" href="#websockets吞吐量优势"><span>WebSockets吞吐量优势</span></a></h4><ul><li>轻量级的数据帧结构</li><li>持久连接减少开销</li><li>支持高并发数据传输</li></ul><h3 id="资源消耗对比" tabindex="-1"><a class="header-anchor" href="#资源消耗对比"><span>资源消耗对比</span></a></h3><h4 id="http资源消耗" tabindex="-1"><a class="header-anchor" href="#http资源消耗"><span>HTTP资源消耗</span></a></h4><ul><li><strong>内存</strong>：每次请求都需要分配内存处理</li><li><strong>CPU</strong>：解析HTTP头部消耗CPU资源</li><li><strong>网络</strong>：大量冗余的头部信息</li></ul><h4 id="websockets资源消耗" tabindex="-1"><a class="header-anchor" href="#websockets资源消耗"><span>WebSockets资源消耗</span></a></h4><ul><li><strong>内存</strong>：连接保持，但单次传输开销小</li><li><strong>CPU</strong>：帧解析简单，消耗较少CPU资源</li><li><strong>网络</strong>：传输效率高，网络开销小</li></ul><h2 id="安全性对比" tabindex="-1"><a class="header-anchor" href="#安全性对比"><span>安全性对比</span></a></h2><h3 id="http安全性" tabindex="-1"><a class="header-anchor" href="#http安全性"><span>HTTP安全性</span></a></h3><ul><li><strong>HTTPS</strong>：通过TLS/SSL加密传输</li><li><strong>身份验证</strong>：支持多种认证机制</li><li><strong>访问控制</strong>：基于HTTP头部的访问控制</li></ul><h3 id="websockets安全性" tabindex="-1"><a class="header-anchor" href="#websockets安全性"><span>WebSockets安全性</span></a></h3><ul><li><strong>WSS</strong>：通过TLS/SSL加密传输</li><li><strong>Origin检查</strong>：防止跨站WebSocket劫持</li><li><strong>掩码机制</strong>：防止缓存污染攻击</li></ul><h2 id="开发复杂度对比" tabindex="-1"><a class="header-anchor" href="#开发复杂度对比"><span>开发复杂度对比</span></a></h2><h3 id="http开发复杂度" tabindex="-1"><a class="header-anchor" href="#http开发复杂度"><span>HTTP开发复杂度</span></a></h3><ul><li><strong>简单直观</strong>：基于请求-响应模型，易于理解</li><li><strong>工具丰富</strong>：大量开发工具和库支持</li><li><strong>调试方便</strong>：可以使用浏览器开发者工具调试</li></ul><h3 id="websockets开发复杂度" tabindex="-1"><a class="header-anchor" href="#websockets开发复杂度"><span>WebSockets开发复杂度</span></a></h3><ul><li><strong>复杂性较高</strong>：需要处理连接管理、错误处理等</li><li><strong>状态管理</strong>：需要管理连接状态和会话信息</li><li><strong>调试困难</strong>：需要专门的工具调试WebSocket通信</li></ul><h2 id="浏览器支持对比" tabindex="-1"><a class="header-anchor" href="#浏览器支持对比"><span>浏览器支持对比</span></a></h2><h3 id="http浏览器支持" tabindex="-1"><a class="header-anchor" href="#http浏览器支持"><span>HTTP浏览器支持</span></a></h3><ul><li><strong>全面支持</strong>：所有浏览器都支持HTTP协议</li><li><strong>成熟稳定</strong>：经过多年发展，非常稳定</li></ul><h3 id="websockets浏览器支持" tabindex="-1"><a class="header-anchor" href="#websockets浏览器支持"><span>WebSockets浏览器支持</span></a></h3><ul><li><strong>现代浏览器支持</strong>：主流浏览器都支持WebSockets</li><li><strong>旧版本限制</strong>：IE9及以下版本不支持</li><li><strong>移动浏览器支持</strong>：大部分移动浏览器支持</li></ul><h2 id="混合使用策略" tabindex="-1"><a class="header-anchor" href="#混合使用策略"><span>混合使用策略</span></a></h2><p>在实际项目中，通常需要结合使用HTTP和WebSockets，发挥各自的优势：</p><h3 id="认证和初始化" tabindex="-1"><a class="header-anchor" href="#认证和初始化"><span>认证和初始化</span></a></h3><ul><li>使用HTTP进行用户认证和获取初始数据</li><li>建立WebSocket连接时传递认证信息</li></ul><h3 id="实时通信" tabindex="-1"><a class="header-anchor" href="#实时通信"><span>实时通信</span></a></h3><ul><li>使用WebSockets进行实时数据传输</li><li>通过HTTP处理非实时的API调用</li></ul><h3 id="错误处理和回退" tabindex="-1"><a class="header-anchor" href="#错误处理和回退"><span>错误处理和回退</span></a></h3><ul><li>WebSocket连接失败时回退到HTTP轮询</li><li>提供兼容性支持</li></ul><h2 id="最佳实践建议" tabindex="-1"><a class="header-anchor" href="#最佳实践建议"><span>最佳实践建议</span></a></h2><h3 id="选择原则" tabindex="-1"><a class="header-anchor" href="#选择原则"><span>选择原则</span></a></h3><ol><li><strong>实时性要求</strong>：需要实时通信选择WebSockets</li><li><strong>数据交互模式</strong>：双向通信选择WebSockets</li><li><strong>性能要求</strong>：高吞吐量选择WebSockets</li><li><strong>开发复杂度</strong>：简单场景选择HTTP</li></ol><h3 id="混合架构" tabindex="-1"><a class="header-anchor" href="#混合架构"><span>混合架构</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 认证使用HTTP</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> authenticateUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">credentials</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/api/auth&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        method</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;POST&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        body</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">credentials</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">response</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 实时通信使用WebSockets</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> connectToWebSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">token</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> socket</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WebSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`wss://example.com/ws?token=</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">token</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onmessage</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 处理实时消息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        handleRealTimeMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>HTTP和WebSockets各有其优势和适用场景。HTTP作为成熟的Web基础协议，适用于大多数传统的Web应用和API调用场景。而WebSockets作为一种新兴的实时通信技术，在需要低延迟、双向通信的场景中表现出色。</p><p>在实际项目中，我们应该根据具体的业务需求、性能要求和技术约束来选择合适的通信协议，甚至结合使用两种技术，构建更加完善和高效的分布式系统。</p><p>理解这两种协议的特点和差异，有助于我们在微服务架构中做出更明智的技术选择，为用户提供更好的体验。</p>`,112)])])}const d=i(t,[["render",l]]),k=JSON.parse('{"path":"/posts/communication/2-6-2-websockets-vs-http-differences.html","title":"WebSockets与HTTP的区别：实时通信技术的深度对比","lang":"zh-CN","frontmatter":{"title":"WebSockets与HTTP的区别：实时通信技术的深度对比","date":"2025-08-31T00:00:00.000Z","categories":["ServiceCommunication"],"tags":["communication"],"published":true,"description":"在现代Web开发和分布式系统中，选择合适的通信协议对于系统性能、用户体验和开发复杂度有着重要影响。HTTP作为Web的基础协议，已经服务了数十年，而WebSockets作为一种相对较新的技术，为实时双向通信提供了全新的解决方案。本文将深入对比WebSockets与HTTP协议在多个维度上的差异，帮助开发者更好地理解两种技术的特点和适用场景。 协议基础对...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebSockets与HTTP的区别：实时通信技术的深度对比\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-01T13:27:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/communication/2-6-2-websockets-vs-http-differences.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"WebSockets与HTTP的区别：实时通信技术的深度对比"}],["meta",{"property":"og:description","content":"在现代Web开发和分布式系统中，选择合适的通信协议对于系统性能、用户体验和开发复杂度有着重要影响。HTTP作为Web的基础协议，已经服务了数十年，而WebSockets作为一种相对较新的技术，为实时双向通信提供了全新的解决方案。本文将深入对比WebSockets与HTTP协议在多个维度上的差异，帮助开发者更好地理解两种技术的特点和适用场景。 协议基础对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T13:27:06.000Z"}],["meta",{"property":"article:tag","content":"communication"}],["meta",{"property":"article:published_time","content":"2025-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-01T13:27:06.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1756733226000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":7.65,"words":2294},"filePathRelative":"posts/communication/2-6-2-websockets-vs-http-differences.md","excerpt":"<p>在现代Web开发和分布式系统中，选择合适的通信协议对于系统性能、用户体验和开发复杂度有着重要影响。HTTP作为Web的基础协议，已经服务了数十年，而WebSockets作为一种相对较新的技术，为实时双向通信提供了全新的解决方案。本文将深入对比WebSockets与HTTP协议在多个维度上的差异，帮助开发者更好地理解两种技术的特点和适用场景。</p>\\n<h2>协议基础对比</h2>\\n<h3>HTTP协议</h3>\\n<p>HTTP（HyperText Transfer Protocol）是一种应用层协议，基于请求-响应模型。客户端发送请求到服务器，服务器处理请求并返回响应，然后连接关闭。HTTP/1.1引入了持久连接，但仍然保持请求-响应的基本模式。</p>","autoDesc":true}');export{d as comp,k as data};
