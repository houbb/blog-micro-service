import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as t,o as c}from"./app-BcGQ-_EK.js";const n={};function a(i,e){return c(),r("div",null,[...e[0]||(e[0]=[t('<h2 id="第1章-docker-简介与背景" tabindex="-1"><a class="header-anchor" href="#第1章-docker-简介与背景"><span>第1章：Docker 简介与背景</span></a></h2><h3 id="什么是-docker" tabindex="-1"><a class="header-anchor" href="#什么是-docker"><span>什么是 Docker？</span></a></h3><p>Docker 是一个开源的应用容器引擎，基于 Go 语言开发，遵循 Apache 2.0 协议开源。它可以让开发者打包他们的应用以及应用的依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低。Docker 技术在近几年迅速成为云计算和 DevOps 领域的核心技术之一。</p><h3 id="docker-与虚拟机的区别" tabindex="-1"><a class="header-anchor" href="#docker-与虚拟机的区别"><span>Docker 与虚拟机的区别</span></a></h3><p>传统的虚拟化技术如 VMware、VirtualBox 等，通过 Hypervisor 虚拟化物理硬件资源，然后在这些虚拟硬件上运行完整的操作系统（Guest OS）。每个虚拟机都包含一个完整的操作系统副本，因此占用资源较多，启动速度较慢。</p><p>而 Docker 容器则是在操作系统层面实现虚拟化，容器共享宿主机的操作系统内核，只包含应用运行所需的库、依赖和设置。因此容器更加轻量级，启动速度更快，资源利用率更高。</p><h3 id="docker-的历史与发展" tabindex="-1"><a class="header-anchor" href="#docker-的历史与发展"><span>Docker 的历史与发展</span></a></h3><p>Docker 由 Solomon Hykes 在法国初创公司 dotCloud 于 2013 年开源。最初 Docker 是 dotCloud 内部的一个项目，用于解决应用程序部署的复杂性问题。开源后，Docker 迅速获得了广泛关注和社区支持。</p><p>Docker 的发展历程包括：</p><ul><li>2013 年：Docker 正式开源并发布 0.1 版本</li><li>2014 年：Docker 1.0 发布，标志着其进入生产环境可用阶段</li><li>2015 年：Docker 公司推出 Docker Swarm 进行容器编排</li><li>2016 年：Docker 与 Microsoft、IBM 等公司合作，扩展企业级功能</li><li>2017 年：容器编排领域出现 Kubernetes，逐渐成为主流</li><li>2020 年：Mirantis 收购 Docker 企业业务</li></ul><h3 id="docker-在现代软件开发中的应用" tabindex="-1"><a class="header-anchor" href="#docker-在现代软件开发中的应用"><span>Docker 在现代软件开发中的应用</span></a></h3><p>在现代软件开发中，Docker 发挥着重要作用：</p><ol><li><p><strong>简化部署</strong>：开发人员可以将应用及其依赖打包成镜像，确保在任何环境中都能一致运行，解决了&quot;在我机器上能跑&quot;的问题。</p></li><li><p><strong>微服务架构</strong>：Docker 容器天然适合微服务架构，每个服务可以独立部署、扩展和更新。</p></li><li><p><strong>DevOps 实践</strong>：Docker 与 CI/CD 流水线结合，实现自动化构建、测试和部署。</p></li><li><p><strong>云原生应用</strong>：Docker 是云原生计算基金会（CNCF）的重要组成部分，支撑着 Kubernetes 等容器编排平台。</p></li><li><p><strong>资源优化</strong>：相比传统虚拟机，Docker 容器更轻量，可以在同一台主机上运行更多容器实例。</p></li></ol><p>本章为读者提供了 Docker 的基本概念和背景知识，为后续章节的学习奠定了基础。在接下来的章节中，我们将深入探讨 Docker 的安装配置、核心概念以及实际操作。</p>',15)])])}const d=o(n,[["render",a]]),l=JSON.parse('{"path":"/posts/container-docker/005-1-1-introduction-to-docker-and-background.html","title":"Docker 简介与背景","lang":"zh-CN","frontmatter":{"title":"Docker 简介与背景","date":"2025-08-30T00:00:00.000Z","categories":["Docker"],"tags":["container-docker"],"published":true,"description":"第1章：Docker 简介与背景 什么是 Docker？ Docker 是一个开源的应用容器引擎，基于 Go 语言开发，遵循 Apache 2.0 协议开源。它可以让开发者打包他们的应用以及应用的依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 简介与背景\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T09:05:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/container-docker/005-1-1-introduction-to-docker-and-background.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Docker 简介与背景"}],["meta",{"property":"og:description","content":"第1章：Docker 简介与背景 什么是 Docker？ Docker 是一个开源的应用容器引擎，基于 Go 语言开发，遵循 Apache 2.0 协议开源。它可以让开发者打包他们的应用以及应用的依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T09:05:07.000Z"}],["meta",{"property":"article:tag","content":"container-docker"}],["meta",{"property":"article:published_time","content":"2025-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T09:05:07.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1757235907000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":2.58,"words":773},"filePathRelative":"posts/container-docker/005-1-1-introduction-to-docker-and-background.md","excerpt":"<h2>第1章：Docker 简介与背景</h2>\\n<h3>什么是 Docker？</h3>\\n<p>Docker 是一个开源的应用容器引擎，基于 Go 语言开发，遵循 Apache 2.0 协议开源。它可以让开发者打包他们的应用以及应用的依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上，也可以实现虚拟化。</p>\\n<p>容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低。Docker 技术在近几年迅速成为云计算和 DevOps 领域的核心技术之一。</p>\\n<h3>Docker 与虚拟机的区别</h3>\\n<p>传统的虚拟化技术如 VMware、VirtualBox 等，通过 Hypervisor 虚拟化物理硬件资源，然后在这些虚拟硬件上运行完整的操作系统（Guest OS）。每个虚拟机都包含一个完整的操作系统副本，因此占用资源较多，启动速度较慢。</p>","autoDesc":true}');export{d as comp,l as data};
