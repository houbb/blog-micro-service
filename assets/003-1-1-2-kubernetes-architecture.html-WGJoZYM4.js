import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as n}from"./app-BcGQ-_EK.js";const l={};function o(i,e){return n(),t("div",null,[...e[0]||(e[0]=[a('<p>理解Kubernetes的体系架构是掌握这一容器编排平台的关键。Kubernetes采用分布式架构设计，通过多个核心组件协同工作，实现了容器化应用的自动化部署、扩展和管理。本章将深入解析Kubernetes的架构组成，帮助读者建立对其工作机制的全面认知。</p><h2 id="控制平面与节点的架构" tabindex="-1"><a class="header-anchor" href="#控制平面与节点的架构"><span>控制平面与节点的架构</span></a></h2><p>Kubernetes集群由两大部分组成：控制平面（Control Plane）和工作节点（Worker Nodes）。控制平面负责整个集群的管理和决策，而工作节点负责运行实际的应用容器。</p><h3 id="控制平面-control-plane" tabindex="-1"><a class="header-anchor" href="#控制平面-control-plane"><span>控制平面（Control Plane）</span></a></h3><p>控制平面是Kubernetes集群的大脑，负责维护集群的状态、做出调度决策以及响应集群事件。它通常由多个组件组成，这些组件可以运行在单个节点上（用于学习和测试），也可以分布在多个节点上以实现高可用性。</p><h3 id="工作节点-worker-nodes" tabindex="-1"><a class="header-anchor" href="#工作节点-worker-nodes"><span>工作节点（Worker Nodes）</span></a></h3><p>工作节点是运行应用容器的实际机器。每个节点都运行着必要的组件来管理Pod和与控制平面通信。在典型的生产环境中，一个Kubernetes集群会包含多个工作节点以提供足够的计算资源和高可用性。</p><h2 id="核心组件-api-server、controller-manager、scheduler、etcd" tabindex="-1"><a class="header-anchor" href="#核心组件-api-server、controller-manager、scheduler、etcd"><span>核心组件：API Server、Controller Manager、Scheduler、etcd</span></a></h2><p>Kubernetes控制平面的核心组件各司其职，协同工作以维护集群的正常运行。</p><h3 id="api-server" tabindex="-1"><a class="header-anchor" href="#api-server"><span>API Server</span></a></h3><p>API Server是Kubernetes控制平面的前端，也是整个系统的入口点。它负责处理所有REST请求，验证并配置API对象（如Pod、Service、ReplicationController等）。API Server是唯一与etcd直接通信的组件，确保集群状态的一致性。</p><p>API Server的主要功能包括：</p><ul><li>提供RESTful API接口供用户和组件交互</li><li>验证API请求的合法性</li><li>集群状态的存储和查询</li><li>认证和授权管理</li></ul><h3 id="controller-manager" tabindex="-1"><a class="header-anchor" href="#controller-manager"><span>Controller Manager</span></a></h3><p>Controller Manager运行着控制器进程，这些控制器负责维护集群的状态。逻辑上，每个控制器都是一个独立的进程，但为了降低复杂性，它们都被编译到同一个可执行文件中并运行在同一个进程中。</p><p>主要的控制器包括：</p><ul><li>Node Controller：负责节点故障检测和响应</li><li>Replication Controller：维护Pod副本数量</li><li>Deployment Controller：管理Deployment对象</li><li>StatefulSet Controller：管理有状态应用</li></ul><h3 id="scheduler" tabindex="-1"><a class="header-anchor" href="#scheduler"><span>Scheduler</span></a></h3><p>Scheduler负责将未调度的Pod分配到合适的节点上运行。它通过资源需求、服务质量要求、亲和性/反亲和性规范、数据局部性、工作负载间的干扰等因素来做出调度决策。</p><p>Scheduler的工作流程包括：</p><ol><li>过滤阶段：筛选出满足Pod要求的节点</li><li>打分阶段：为候选节点打分，选择最优节点</li><li>绑定阶段：将Pod绑定到选定的节点</li></ol><h3 id="etcd" tabindex="-1"><a class="header-anchor" href="#etcd"><span>etcd</span></a></h3><p>etcd是一个分布式键值存储系统，用于存储Kubernetes集群的所有配置数据和状态信息。它是集群的唯一数据源，确保了集群状态的一致性和持久性。</p><p>etcd的特性包括：</p><ul><li>强一致性：使用Raft共识算法保证数据一致性</li><li>高可用性：支持集群部署，容忍节点故障</li><li>观察机制：支持键值变化的实时监听</li></ul><h2 id="工作节点与-pod-资源" tabindex="-1"><a class="header-anchor" href="#工作节点与-pod-资源"><span>工作节点与 Pod 资源</span></a></h2><p>工作节点是运行应用容器的机器，可以是物理机或虚拟机。每个节点都包含运行Pod所需的服务，并由控制平面管理。</p><h3 id="pod资源" tabindex="-1"><a class="header-anchor" href="#pod资源"><span>Pod资源</span></a></h3><p>Pod是Kubernetes中最小的可部署单元，代表集群中运行的进程。一个Pod可以包含一个或多个紧密相关的容器，这些容器共享存储、网络和运行规范。</p><p>Pod的特性包括：</p><ul><li>共享网络命名空间：Pod内的容器共享IP地址和端口空间</li><li>共享存储：Pod内的容器可以共享存储卷</li><li>生命周期短暂：Pod被创建后不会自愈，需要控制器管理</li></ul><h2 id="kubelet、kube-proxy-及其功能" tabindex="-1"><a class="header-anchor" href="#kubelet、kube-proxy-及其功能"><span>kubelet、kube-proxy 及其功能</span></a></h2><p>每个工作节点都运行着两个关键组件：kubelet和kube-proxy。</p><h3 id="kubelet" tabindex="-1"><a class="header-anchor" href="#kubelet"><span>kubelet</span></a></h3><p>kubelet是运行在每个节点上的代理，负责确保Pod中的容器按预期运行。它从API Server接收Pod定义，并确保这些Pod在本地节点上正确运行。</p><p>kubelet的主要功能包括：</p><ul><li>与API Server通信，获取分配给节点的Pod配置</li><li>挂载Pod所需的存储卷</li><li>下载Pod的Secret</li><li>运行Pod中的容器</li><li>定期向API Server报告节点和Pod状态</li></ul><h3 id="kube-proxy" tabindex="-1"><a class="header-anchor" href="#kube-proxy"><span>kube-proxy</span></a></h3><p>kube-proxy是运行在每个节点上的网络代理，负责实现Kubernetes Service概念的一部分。它维护节点上的网络规则，使得从集群内部或外部到Pod的网络连接能够正常工作。</p><p>kube-proxy的工作方式包括：</p><ul><li>在Linux节点上使用iptables或IPVS实现服务代理</li><li>负载均衡流量到后端Pod</li><li>处理服务发现和网络地址转换</li></ul><h2 id="服务发现与负载均衡" tabindex="-1"><a class="header-anchor" href="#服务发现与负载均衡"><span>服务发现与负载均衡</span></a></h2><p>Kubernetes通过Service对象实现服务发现和负载均衡功能。</p><h3 id="服务发现" tabindex="-1"><a class="header-anchor" href="#服务发现"><span>服务发现</span></a></h3><p>Kubernetes中的服务发现通过以下机制实现：</p><ul><li>DNS：集群内的DNS服务器为每个Service创建DNS记录</li><li>环境变量：kubelet为每个Pod注入相关Service的环境变量</li><li>API Server：应用可以直接查询API Server获取Service信息</li></ul><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h3><p>Kubernetes支持多种负载均衡模式：</p><ul><li>ClusterIP：集群内部的虚拟IP，实现集群内负载均衡</li><li>NodePort：在每个节点上开放端口，实现外部访问</li><li>LoadBalancer：通过云提供商的负载均衡器实现外部访问</li><li>ExternalName：将Service映射到外部DNS名称</li></ul><p>通过这些组件的协同工作，Kubernetes实现了强大而灵活的容器编排能力。理解这些核心组件及其交互方式，是深入掌握Kubernetes的关键基础。</p>',50)])])}const d=r(l,[["render",o]]),c=JSON.parse('{"path":"/posts/container-k8s/003-1-1-2-kubernetes-architecture.html","title":"Kubernetes体系架构：掌控云原生的核心组件","lang":"zh-CN","frontmatter":{"title":"Kubernetes体系架构：掌控云原生的核心组件","date":"2025-08-31T00:00:00.000Z","categories":["Kubernetes"],"tags":["container-k8s"],"published":true,"description":"理解Kubernetes的体系架构是掌握这一容器编排平台的关键。Kubernetes采用分布式架构设计，通过多个核心组件协同工作，实现了容器化应用的自动化部署、扩展和管理。本章将深入解析Kubernetes的架构组成，帮助读者建立对其工作机制的全面认知。 控制平面与节点的架构 Kubernetes集群由两大部分组成：控制平面（Control Plane...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kubernetes体系架构：掌控云原生的核心组件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T09:05:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/container-k8s/003-1-1-2-kubernetes-architecture.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Kubernetes体系架构：掌控云原生的核心组件"}],["meta",{"property":"og:description","content":"理解Kubernetes的体系架构是掌握这一容器编排平台的关键。Kubernetes采用分布式架构设计，通过多个核心组件协同工作，实现了容器化应用的自动化部署、扩展和管理。本章将深入解析Kubernetes的架构组成，帮助读者建立对其工作机制的全面认知。 控制平面与节点的架构 Kubernetes集群由两大部分组成：控制平面（Control Plane..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T09:05:07.000Z"}],["meta",{"property":"article:tag","content":"container-k8s"}],["meta",{"property":"article:published_time","content":"2025-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T09:05:07.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1757235907000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":5.13,"words":1540},"filePathRelative":"posts/container-k8s/003-1-1-2-kubernetes-architecture.md","excerpt":"<p>理解Kubernetes的体系架构是掌握这一容器编排平台的关键。Kubernetes采用分布式架构设计，通过多个核心组件协同工作，实现了容器化应用的自动化部署、扩展和管理。本章将深入解析Kubernetes的架构组成，帮助读者建立对其工作机制的全面认知。</p>\\n<h2>控制平面与节点的架构</h2>\\n<p>Kubernetes集群由两大部分组成：控制平面（Control Plane）和工作节点（Worker Nodes）。控制平面负责整个集群的管理和决策，而工作节点负责运行实际的应用容器。</p>\\n<h3>控制平面（Control Plane）</h3>\\n<p>控制平面是Kubernetes集群的大脑，负责维护集群的状态、做出调度决策以及响应集群事件。它通常由多个组件组成，这些组件可以运行在单个节点上（用于学习和测试），也可以分布在多个节点上以实现高可用性。</p>","autoDesc":true}');export{d as comp,c as data};
