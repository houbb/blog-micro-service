import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-DAaD84tA.js";const t={};function l(h,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<p>在现代Web应用和微服务架构中，实时通信需求日益增长。无论是在线游戏、聊天应用、实时数据监控，还是协作工具，都需要低延迟、双向的实时通信能力。基于WebSockets的通信方式为这些场景提供了理想的解决方案。本文将深入探讨WebSockets协议的基本概念、与HTTP的区别、在微服务中的应用场景，以及设计与实现WebSockets服务的最佳实践。</p><h2 id="websockets协议简介" tabindex="-1"><a class="header-anchor" href="#websockets协议简介"><span>WebSockets协议简介</span></a></h2><p>WebSockets是一种在单个TCP连接上进行全双工通信的协议，它使得客户端和服务器之间可以进行实时、双向的数据交换。WebSockets协议于2011年被IETF标准化为RFC 6455，并被W3C定义为浏览器API标准。</p><h3 id="核心特性" tabindex="-1"><a class="header-anchor" href="#核心特性"><span>核心特性</span></a></h3><ol><li><strong>全双工通信</strong>：客户端和服务器可以同时发送和接收数据</li><li><strong>低延迟</strong>：一旦连接建立，数据传输的开销很小</li><li><strong>持久连接</strong>：连接一旦建立就会保持，直到被显式关闭</li><li><strong>二进制和文本数据支持</strong>：支持传输二进制数据和文本数据</li><li><strong>跨域支持</strong>：支持跨域通信</li></ol><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><p>WebSockets通信通过一个称为&quot;握手&quot;的过程建立连接：</p><ol><li><strong>握手阶段</strong>：客户端通过HTTP协议发起升级请求</li><li><strong>协议升级</strong>：服务器同意升级后，连接从HTTP协议切换到WebSockets协议</li><li><strong>数据传输</strong>：连接建立后，双方可以随时发送数据</li><li><strong>连接关闭</strong>：任一方可以发起连接关闭</li></ol><h2 id="websockets与http的区别" tabindex="-1"><a class="header-anchor" href="#websockets与http的区别"><span>WebSockets与HTTP的区别</span></a></h2><h3 id="连接特性" tabindex="-1"><a class="header-anchor" href="#连接特性"><span>连接特性</span></a></h3><table><thead><tr><th>特性</th><th>HTTP</th><th>WebSockets</th></tr></thead><tbody><tr><td>连接方式</td><td>请求-响应模式</td><td>持久连接</td></tr><tr><td>连接开销</td><td>每次请求都需要建立连接</td><td>连接一次，多次使用</td></tr><tr><td>通信方向</td><td>单向（客户端发起）</td><td>双向（双方均可发起）</td></tr><tr><td>数据传输</td><td>完整的HTTP头部</td><td>轻量级帧</td></tr></tbody></table><h3 id="性能对比" tabindex="-1"><a class="header-anchor" href="#性能对比"><span>性能对比</span></a></h3><h4 id="http的限制" tabindex="-1"><a class="header-anchor" href="#http的限制"><span>HTTP的限制</span></a></h4><ul><li><strong>高延迟</strong>：每次请求都需要建立TCP连接（除非使用持久连接）</li><li><strong>高开销</strong>：每个请求都包含完整的HTTP头部</li><li><strong>单向通信</strong>：服务器无法主动向客户端推送数据</li></ul><h4 id="websockets的优势" tabindex="-1"><a class="header-anchor" href="#websockets的优势"><span>WebSockets的优势</span></a></h4><ul><li><strong>低延迟</strong>：连接建立后，数据传输延迟极低</li><li><strong>低开销</strong>：使用轻量级的帧结构传输数据</li><li><strong>双向通信</strong>：服务器和客户端都可以主动发送数据</li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><h4 id="http适用于" tabindex="-1"><a class="header-anchor" href="#http适用于"><span>HTTP适用于</span></a></h4><ul><li>传统的Web页面请求</li><li>RESTful API调用</li><li>文件下载和上传</li><li>不需要实时交互的场景</li></ul><h4 id="websockets适用于" tabindex="-1"><a class="header-anchor" href="#websockets适用于"><span>WebSockets适用于</span></a></h4><ul><li>实时聊天应用</li><li>在线游戏</li><li>实时数据监控</li><li>协作编辑工具</li><li>实时通知系统</li></ul><h2 id="微服务中的实时通信应用场景" tabindex="-1"><a class="header-anchor" href="#微服务中的实时通信应用场景"><span>微服务中的实时通信应用场景</span></a></h2><h3 id="实时通知系统" tabindex="-1"><a class="header-anchor" href="#实时通知系统"><span>实时通知系统</span></a></h3><p>在微服务架构中，WebSockets可以用于构建实时通知系统，当某个服务中的事件发生时，可以通过WebSockets将通知实时推送给前端用户。</p><h4 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h4><ol><li>前端与通知服务建立WebSockets连接</li><li>当业务服务产生通知事件时，发送消息到通知服务</li><li>通知服务通过WebSockets将通知推送给前端</li></ol><h3 id="实时数据监控" tabindex="-1"><a class="header-anchor" href="#实时数据监控"><span>实时数据监控</span></a></h3><p>在监控和仪表板应用中，WebSockets可以实时推送系统指标、日志信息等数据。</p><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h4><ul><li>系统性能监控</li><li>业务指标实时展示</li><li>日志实时查看</li><li>告警信息推送</li></ul><h3 id="协作应用" tabindex="-1"><a class="header-anchor" href="#协作应用"><span>协作应用</span></a></h3><p>在协作编辑、在线白板等应用中，WebSockets可以实现实时的多人协作。</p><h4 id="功能实现" tabindex="-1"><a class="header-anchor" href="#功能实现"><span>功能实现</span></a></h4><ul><li>实时同步用户操作</li><li>光标位置共享</li><li>内容变更实时更新</li><li>用户状态同步</li></ul><h3 id="在线游戏" tabindex="-1"><a class="header-anchor" href="#在线游戏"><span>在线游戏</span></a></h3><p>在多人在线游戏中，WebSockets可以处理玩家之间的实时交互。</p><h4 id="游戏场景" tabindex="-1"><a class="header-anchor" href="#游戏场景"><span>游戏场景</span></a></h4><ul><li>玩家位置同步</li><li>游戏状态更新</li><li>聊天消息传输</li><li>游戏事件广播</li></ul><h2 id="设计与实现websockets服务" tabindex="-1"><a class="header-anchor" href="#设计与实现websockets服务"><span>设计与实现WebSockets服务</span></a></h2><h3 id="架构设计" tabindex="-1"><a class="header-anchor" href="#架构设计"><span>架构设计</span></a></h3><h4 id="单体架构" tabindex="-1"><a class="header-anchor" href="#单体架构"><span>单体架构</span></a></h4><p>在单体应用中，WebSockets服务可以直接集成在应用内部。</p><h4 id="微服务架构" tabindex="-1"><a class="header-anchor" href="#微服务架构"><span>微服务架构</span></a></h4><p>在微服务架构中，WebSockets服务通常作为一个独立的服务存在。</p><h3 id="连接管理" tabindex="-1"><a class="header-anchor" href="#连接管理"><span>连接管理</span></a></h3><h4 id="连接建立" tabindex="-1"><a class="header-anchor" href="#连接建立"><span>连接建立</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 客户端连接示例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> socket</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WebSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ws://localhost:8080/websocket&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onopen</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;连接已建立&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onmessage</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;收到消息:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onclose</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;连接已关闭&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="连接维护" tabindex="-1"><a class="header-anchor" href="#连接维护"><span>连接维护</span></a></h4><ul><li>心跳机制：定期发送心跳包检测连接状态</li><li>连接池：管理多个客户端连接</li><li>负载均衡：在多个服务实例间分配连接</li></ul><h3 id="消息处理" tabindex="-1"><a class="header-anchor" href="#消息处理"><span>消息处理</span></a></h3><h4 id="消息格式" tabindex="-1"><a class="header-anchor" href="#消息格式"><span>消息格式</span></a></h4><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;type&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;chat_message&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;payload&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;userId&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;message&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        &quot;timestamp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2023-01-01T12:00:00Z&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="消息路由" tabindex="-1"><a class="header-anchor" href="#消息路由"><span>消息路由</span></a></h4><ul><li>根据消息类型路由到不同的处理函数</li><li>根据用户ID或房间ID路由到特定的连接</li></ul><h3 id="安全性考虑" tabindex="-1"><a class="header-anchor" href="#安全性考虑"><span>安全性考虑</span></a></h3><h4 id="身份验证" tabindex="-1"><a class="header-anchor" href="#身份验证"><span>身份验证</span></a></h4><ul><li>连接建立时进行身份验证</li><li>使用JWT等令牌机制</li><li>定期验证用户权限</li></ul><h4 id="数据加密" tabindex="-1"><a class="header-anchor" href="#数据加密"><span>数据加密</span></a></h4><ul><li>使用WSS（WebSockets Secure）加密传输</li><li>对敏感数据进行额外加密</li></ul><h4 id="访问控制" tabindex="-1"><a class="header-anchor" href="#访问控制"><span>访问控制</span></a></h4><ul><li>控制连接数量</li><li>限制消息发送频率</li><li>防止恶意连接</li></ul><h3 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化"><span>性能优化</span></a></h3><h4 id="连接优化" tabindex="-1"><a class="header-anchor" href="#连接优化"><span>连接优化</span></a></h4><ul><li>使用连接池减少连接建立开销</li><li>实现连接复用</li><li>合理设置连接超时时间</li></ul><h4 id="消息优化" tabindex="-1"><a class="header-anchor" href="#消息优化"><span>消息优化</span></a></h4><ul><li>消息压缩减少传输量</li><li>批量发送消息</li><li>使用二进制格式传输大数据</li></ul><h4 id="扩展性设计" tabindex="-1"><a class="header-anchor" href="#扩展性设计"><span>扩展性设计</span></a></h4><ul><li>水平扩展支持更多连接</li><li>使用消息队列处理高并发</li><li>实现集群部署</li></ul><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><ul><li>实现重连机制</li><li>处理网络异常</li><li>记录错误日志</li></ul><h3 id="监控和调试" tabindex="-1"><a class="header-anchor" href="#监控和调试"><span>监控和调试</span></a></h3><ul><li>监控连接数量和消息吞吐量</li><li>记录连接建立和关闭事件</li><li>提供调试接口</li></ul><h3 id="资源管理" tabindex="-1"><a class="header-anchor" href="#资源管理"><span>资源管理</span></a></h3><ul><li>及时释放断开的连接</li><li>限制单个用户的连接数</li><li>合理配置内存使用</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>基于WebSockets的实时通信为现代Web应用和微服务架构提供了强大的实时交互能力。通过理解WebSockets协议的特点、与HTTP的区别，以及在微服务中的应用场景，我们可以更好地设计和实现满足实时通信需求的系统。</p><p>在实际项目中，我们需要根据具体的业务需求和技术约束，合理选择和应用WebSockets技术，同时关注安全性、性能和可扩展性等方面的问题。</p><p>在后续章节中，我们将探讨服务网格、事件驱动架构等高级通信模式，进一步丰富我们的微服务通信技术栈。</p>`,79)])])}const d=i(t,[["render",l]]),k=JSON.parse('{"path":"/posts/communication/018-2-6-websockets-based-real-time-communication.html","title":"基于WebSockets的实时通信：构建交互式微服务应用","lang":"zh-CN","frontmatter":{"title":"基于WebSockets的实时通信：构建交互式微服务应用","date":"2025-08-31T00:00:00.000Z","categories":["ServiceCommunication"],"tags":["communication"],"published":true,"description":"在现代Web应用和微服务架构中，实时通信需求日益增长。无论是在线游戏、聊天应用、实时数据监控，还是协作工具，都需要低延迟、双向的实时通信能力。基于WebSockets的通信方式为这些场景提供了理想的解决方案。本文将深入探讨WebSockets协议的基本概念、与HTTP的区别、在微服务中的应用场景，以及设计与实现WebSockets服务的最佳实践。 We...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基于WebSockets的实时通信：构建交互式微服务应用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T09:05:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/communication/018-2-6-websockets-based-real-time-communication.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"基于WebSockets的实时通信：构建交互式微服务应用"}],["meta",{"property":"og:description","content":"在现代Web应用和微服务架构中，实时通信需求日益增长。无论是在线游戏、聊天应用、实时数据监控，还是协作工具，都需要低延迟、双向的实时通信能力。基于WebSockets的通信方式为这些场景提供了理想的解决方案。本文将深入探讨WebSockets协议的基本概念、与HTTP的区别、在微服务中的应用场景，以及设计与实现WebSockets服务的最佳实践。 We..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T09:05:07.000Z"}],["meta",{"property":"article:tag","content":"communication"}],["meta",{"property":"article:published_time","content":"2025-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T09:05:07.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1757235907000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":5.67,"words":1700},"filePathRelative":"posts/communication/018-2-6-websockets-based-real-time-communication.md","excerpt":"<p>在现代Web应用和微服务架构中，实时通信需求日益增长。无论是在线游戏、聊天应用、实时数据监控，还是协作工具，都需要低延迟、双向的实时通信能力。基于WebSockets的通信方式为这些场景提供了理想的解决方案。本文将深入探讨WebSockets协议的基本概念、与HTTP的区别、在微服务中的应用场景，以及设计与实现WebSockets服务的最佳实践。</p>\\n<h2>WebSockets协议简介</h2>\\n<p>WebSockets是一种在单个TCP连接上进行全双工通信的协议，它使得客户端和服务器之间可以进行实时、双向的数据交换。WebSockets协议于2011年被IETF标准化为RFC 6455，并被W3C定义为浏览器API标准。</p>","autoDesc":true}');export{d as comp,k as data};
