import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-BS2-Vf28.js";const l={};function t(h,i){return n(),e("div",null,[...i[0]||(i[0]=[a(`<p>部署Kubernetes集群是使用这一强大容器编排平台的第一步。根据不同的使用场景和需求，有多种方式可以部署Kubernetes集群。本章将详细介绍各种部署方法，从适用于开发和学习的本地环境，到适用于生产环境的高可用集群，帮助读者选择最适合的部署方案。</p><h2 id="kubernetes-安装与配置-单节点、多节点" tabindex="-1"><a class="header-anchor" href="#kubernetes-安装与配置-单节点、多节点"><span>Kubernetes 安装与配置（单节点、多节点）</span></a></h2><p>在深入具体的部署工具之前，我们需要了解Kubernetes集群的基本组成和安装要求。</p><h3 id="系统要求" tabindex="-1"><a class="header-anchor" href="#系统要求"><span>系统要求</span></a></h3><p>部署Kubernetes集群需要满足以下基本要求：</p><ul><li>至少2台机器（1台控制平面节点，1台工作节点）</li><li>每台机器至少2GB内存</li><li>每台机器至少2个CPU核心</li><li>所有机器之间网络互通</li><li>唯一的主机名、MAC地址和product_uuid</li><li>特定端口的开放（如6443、2379-2380、10250等）</li></ul><h3 id="单节点部署" tabindex="-1"><a class="header-anchor" href="#单节点部署"><span>单节点部署</span></a></h3><p>单节点部署通常用于学习和开发环境，所有控制平面组件和工作节点组件都运行在同一台机器上。这种方式资源消耗较少，但不具备高可用性。</p><h3 id="多节点部署" tabindex="-1"><a class="header-anchor" href="#多节点部署"><span>多节点部署</span></a></h3><p>多节点部署是生产环境的标准配置，控制平面组件分布在多个节点上以实现高可用性，工作节点也分布在多个机器上以提供足够的计算资源。</p><h2 id="使用-minikube-部署本地集群" tabindex="-1"><a class="header-anchor" href="#使用-minikube-部署本地集群"><span>使用 Minikube 部署本地集群</span></a></h2><p>Minikube是Kubernetes官方提供的工具，用于在本地机器上运行单节点Kubernetes集群。它非常适合学习Kubernetes、开发Kubernetes应用以及进行本地测试。</p><h3 id="安装-minikube" tabindex="-1"><a class="header-anchor" href="#安装-minikube"><span>安装 Minikube</span></a></h3><p>Minikube支持多种操作系统，包括Windows、macOS和Linux。安装过程相对简单：</p><ol><li>确保已安装hypervisor（如VirtualBox、Hyper-V、KVM等）</li><li>下载并安装Minikube</li><li>安装kubectl命令行工具</li></ol><h3 id="启动-minikube-集群" tabindex="-1"><a class="header-anchor" href="#启动-minikube-集群"><span>启动 Minikube 集群</span></a></h3><p>启动Minikube集群非常简单，只需执行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">minikube</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Minikube会自动下载所需组件并启动集群。可以通过以下命令验证集群状态：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cluster-info</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="minikube-的高级功能" tabindex="-1"><a class="header-anchor" href="#minikube-的高级功能"><span>Minikube 的高级功能</span></a></h3><p>Minikube提供了许多有用的附加功能：</p><ul><li>插件系统：支持多种插件，如Ingress、Dashboard、Registry等</li><li>多集群管理：可以创建和管理多个Minikube集群</li><li>资源配置：可以指定CPU、内存等资源限制</li><li>网络配置：支持不同的网络驱动和端口映射</li></ul><h2 id="使用-kubeadm-部署生产级集群" tabindex="-1"><a class="header-anchor" href="#使用-kubeadm-部署生产级集群"><span>使用 kubeadm 部署生产级集群</span></a></h2><p>kubeadm是Kubernetes官方提供的集群部署工具，旨在简化生产级Kubernetes集群的部署过程。它遵循最佳实践，是部署生产环境集群的推荐方式。</p><h3 id="部署前准备" tabindex="-1"><a class="header-anchor" href="#部署前准备"><span>部署前准备</span></a></h3><p>使用kubeadm部署集群需要完成以下准备工作：</p><ol><li>确保所有节点满足系统要求</li><li>在所有节点上安装容器运行时（如Docker、containerd）</li><li>在所有节点上安装kubeadm、kubelet和kubectl</li><li>禁用交换分区</li><li>配置网络以确保节点间通信</li></ol><h3 id="初始化控制平面" tabindex="-1"><a class="header-anchor" href="#初始化控制平面"><span>初始化控制平面</span></a></h3><p>在第一个控制平面节点上执行以下命令初始化集群：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubeadm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --pod-network-cidr=10.244.0.0/16</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>初始化完成后，需要配置kubectl：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/.kube</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/kubernetes/admin.conf</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/.kube/config</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">id</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">id</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$HOME</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/.kube/config</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="部署网络插件" tabindex="-1"><a class="header-anchor" href="#部署网络插件"><span>部署网络插件</span></a></h3><p>Kubernetes集群需要网络插件来实现Pod间通信。常用的网络插件包括Flannel、Calico、Canal等。以Flannel为例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apply</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="添加工作节点" tabindex="-1"><a class="header-anchor" href="#添加工作节点"><span>添加工作节点</span></a></h3><p>在其他节点上执行kubeadm join命令将它们加入集群：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">kubeadm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">control-plane-hos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">control-plane-por</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--token</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">toke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">--discovery-token-ca-cert-hash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sha256:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">has</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="基于云平台-如-aws、gcp、azure-部署-kubernetes" tabindex="-1"><a class="header-anchor" href="#基于云平台-如-aws、gcp、azure-部署-kubernetes"><span>基于云平台（如 AWS、GCP、Azure）部署 Kubernetes</span></a></h2><p>主流云提供商都提供了托管的Kubernetes服务，大大简化了集群的部署和管理。</p><h3 id="amazon-eks" tabindex="-1"><a class="header-anchor" href="#amazon-eks"><span>Amazon EKS</span></a></h3><p>Amazon Elastic Kubernetes Service (EKS) 是AWS提供的托管Kubernetes服务。它消除了控制平面的管理负担，用户只需管理节点。</p><p>部署EKS集群的步骤：</p><ol><li>创建EKS集群控制平面</li><li>创建节点组并加入集群</li><li>配置kubectl访问集群</li></ol><h3 id="google-gke" tabindex="-1"><a class="header-anchor" href="#google-gke"><span>Google GKE</span></a></h3><p>Google Kubernetes Engine (GKE) 是Google Cloud提供的托管Kubernetes服务。它提供了自动化的集群管理功能。</p><p>GKE的特点：</p><ul><li>自动化的控制平面管理</li><li>自动节点修复和升级</li><li>集成的监控和日志</li><li>支持私有集群</li></ul><h3 id="microsoft-aks" tabindex="-1"><a class="header-anchor" href="#microsoft-aks"><span>Microsoft AKS</span></a></h3><p>Azure Kubernetes Service (AKS) 是Microsoft Azure提供的托管Kubernetes服务。它简化了Kubernetes集群的部署、配置和管理。</p><p>AKS的优势：</p><ul><li>无服务器控制平面</li><li>集成的身份验证和授权</li><li>自动化节点管理</li><li>与Azure服务的深度集成</li></ul><h2 id="使用-k3s-部署轻量级集群" tabindex="-1"><a class="header-anchor" href="#使用-k3s-部署轻量级集群"><span>使用 K3s 部署轻量级集群</span></a></h2><p>K3s是Rancher Labs开发的轻量级Kubernetes发行版，专为资源受限环境设计。它打包了所有必需的Kubernetes组件，安装包小于100MB。</p><h3 id="k3s-的特点" tabindex="-1"><a class="header-anchor" href="#k3s-的特点"><span>K3s 的特点</span></a></h3><ul><li>轻量级：二进制文件小于100MB</li><li>简化安装：单个二进制文件，简单命令即可安装</li><li>低资源消耗：内存使用量仅为上游Kubernetes的一半</li><li>内置组件：包含Helm controller、Traefik ingress controller等</li></ul><h3 id="安装-k3s" tabindex="-1"><a class="header-anchor" href="#安装-k3s"><span>安装 K3s</span></a></h3><p>安装K3s非常简单：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -sfL</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://get.k3s.io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> -</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装完成后，K3s会自动启动并配置kubectl：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> k3s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> kubectl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> get</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nodes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="k3s-的使用场景" tabindex="-1"><a class="header-anchor" href="#k3s-的使用场景"><span>K3s 的使用场景</span></a></h3><p>K3s适用于以下场景：</p><ul><li>边缘计算</li><li>IoT设备</li><li>开发和测试环境</li><li>CI/CD流水线</li><li>资源受限的环境</li></ul><p>通过本章的学习，读者应该能够根据自己的需求选择合适的Kubernetes部署方案，并成功部署一个功能完整的Kubernetes集群。无论是在本地开发环境还是生产环境中，正确的部署方式都是充分发挥Kubernetes能力的基础。</p>`,66)])])}const k=s(l,[["render",t]]),d=JSON.parse('{"path":"/posts/container-k8s/1-1-3-kubernetes-cluster-deployment.html","title":"Kubernetes集群部署：从本地开发到生产环境的完整指南","lang":"zh-CN","frontmatter":{"title":"Kubernetes集群部署：从本地开发到生产环境的完整指南","date":"2025-08-31T00:00:00.000Z","categories":["Kubernetes"],"tags":["container-k8s"],"published":true,"description":"部署Kubernetes集群是使用这一强大容器编排平台的第一步。根据不同的使用场景和需求，有多种方式可以部署Kubernetes集群。本章将详细介绍各种部署方法，从适用于开发和学习的本地环境，到适用于生产环境的高可用集群，帮助读者选择最适合的部署方案。 Kubernetes 安装与配置（单节点、多节点） 在深入具体的部署工具之前，我们需要了解Kuber...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kubernetes集群部署：从本地开发到生产环境的完整指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-01T13:27:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/container-k8s/1-1-3-kubernetes-cluster-deployment.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"Kubernetes集群部署：从本地开发到生产环境的完整指南"}],["meta",{"property":"og:description","content":"部署Kubernetes集群是使用这一强大容器编排平台的第一步。根据不同的使用场景和需求，有多种方式可以部署Kubernetes集群。本章将详细介绍各种部署方法，从适用于开发和学习的本地环境，到适用于生产环境的高可用集群，帮助读者选择最适合的部署方案。 Kubernetes 安装与配置（单节点、多节点） 在深入具体的部署工具之前，我们需要了解Kuber..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T13:27:06.000Z"}],["meta",{"property":"article:tag","content":"container-k8s"}],["meta",{"property":"article:published_time","content":"2025-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-01T13:27:06.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1756733226000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":4.92,"words":1476},"filePathRelative":"posts/container-k8s/1-1-3-kubernetes-cluster-deployment.md","excerpt":"<p>部署Kubernetes集群是使用这一强大容器编排平台的第一步。根据不同的使用场景和需求，有多种方式可以部署Kubernetes集群。本章将详细介绍各种部署方法，从适用于开发和学习的本地环境，到适用于生产环境的高可用集群，帮助读者选择最适合的部署方案。</p>\\n<h2>Kubernetes 安装与配置（单节点、多节点）</h2>\\n<p>在深入具体的部署工具之前，我们需要了解Kubernetes集群的基本组成和安装要求。</p>\\n<h3>系统要求</h3>\\n<p>部署Kubernetes集群需要满足以下基本要求：</p>\\n<ul>\\n<li>至少2台机器（1台控制平面节点，1台工作节点）</li>\\n<li>每台机器至少2GB内存</li>\\n<li>每台机器至少2个CPU核心</li>\\n<li>所有机器之间网络互通</li>\\n<li>唯一的主机名、MAC地址和product_uuid</li>\\n<li>特定端口的开放（如6443、2379-2380、10250等）</li>\\n</ul>","autoDesc":true}');export{k as comp,d as data};
