import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-BcGQ-_EK.js";const h={};function e(t,s){return l(),a("div",null,[...s[0]||(s[0]=[n(`<p>WebSockets协议作为实现实时双向通信的重要技术，已经成为了现代Web应用和分布式系统中不可或缺的组成部分。自2011年被IETF标准化为RFC 6455以来，WebSockets协议为开发者提供了在单个TCP连接上进行全双工通信的能力，彻底改变了传统的请求-响应模式。本文将深入探讨WebSockets协议的核心概念、工作机制、技术细节以及在实际应用中的最佳实践。</p><h2 id="websockets协议概述" tabindex="-1"><a class="header-anchor" href="#websockets协议概述"><span>WebSockets协议概述</span></a></h2><p>WebSockets是一种在单个TCP连接上进行全双工通信的协议，它使得客户端和服务器之间可以进行实时、双向的数据交换。与传统的HTTP协议不同，WebSockets协议允许服务器主动向客户端推送数据，而不需要客户端发起请求。</p><h3 id="协议发展历程" tabindex="-1"><a class="header-anchor" href="#协议发展历程"><span>协议发展历程</span></a></h3><p>WebSockets协议的发展经历了以下几个重要阶段：</p><ol><li><strong>2008年</strong>：HTML5草案首次提出WebSockets概念</li><li><strong>2011年</strong>：IETF发布RFC 6455，正式标准化WebSockets协议</li><li><strong>2012年</strong>：W3C发布WebSockets API规范</li><li><strong>2013年</strong>：主流浏览器开始广泛支持WebSockets</li></ol><h3 id="核心特性" tabindex="-1"><a class="header-anchor" href="#核心特性"><span>核心特性</span></a></h3><h4 id="全双工通信" tabindex="-1"><a class="header-anchor" href="#全双工通信"><span>全双工通信</span></a></h4><p>WebSockets协议支持客户端和服务器同时发送和接收数据，实现了真正的双向通信。</p><h4 id="低延迟" tabindex="-1"><a class="header-anchor" href="#低延迟"><span>低延迟</span></a></h4><p>一旦连接建立，数据传输的开销很小，延迟极低。</p><h4 id="持久连接" tabindex="-1"><a class="header-anchor" href="#持久连接"><span>持久连接</span></a></h4><p>连接一旦建立就会保持，直到被显式关闭，避免了频繁建立连接的开销。</p><h4 id="二进制和文本数据支持" tabindex="-1"><a class="header-anchor" href="#二进制和文本数据支持"><span>二进制和文本数据支持</span></a></h4><p>协议支持传输二进制数据和文本数据，满足不同场景的需求。</p><h4 id="跨域支持" tabindex="-1"><a class="header-anchor" href="#跨域支持"><span>跨域支持</span></a></h4><p>通过CORS机制支持跨域通信。</p><h2 id="websockets协议工作机制" tabindex="-1"><a class="header-anchor" href="#websockets协议工作机制"><span>WebSockets协议工作机制</span></a></h2><h3 id="握手过程" tabindex="-1"><a class="header-anchor" href="#握手过程"><span>握手过程</span></a></h3><p>WebSockets通信通过一个称为&quot;握手&quot;的过程建立连接，这个过程基于HTTP协议：</p><h4 id="客户端请求" tabindex="-1"><a class="header-anchor" href="#客户端请求"><span>客户端请求</span></a></h4><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-http"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /chat </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Host</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> server.example.com</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Upgrade</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> websocket</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Upgrade</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Sec-WebSocket-Key</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> dGhlIHNhbXBsZSBub25jZQ==</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Origin</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://example.com</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Sec-WebSocket-Protocol</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> chat, superchat</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Sec-WebSocket-Version</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 13</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="服务器响应" tabindex="-1"><a class="header-anchor" href="#服务器响应"><span>服务器响应</span></a></h4><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-http"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 101</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Switching Protocols</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Upgrade</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> websocket</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Connection</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Upgrade</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Sec-WebSocket-Accept</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Sec-WebSocket-Protocol</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> chat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="握手步骤详解" tabindex="-1"><a class="header-anchor" href="#握手步骤详解"><span>握手步骤详解</span></a></h4><ol><li><strong>协议升级请求</strong>：客户端发送HTTP请求，请求将协议升级到WebSockets</li><li><strong>协议升级响应</strong>：服务器同意升级后，返回101状态码</li><li><strong>连接建立</strong>：连接从HTTP协议切换到WebSockets协议</li><li><strong>数据传输</strong>：双方可以开始进行双向数据传输</li></ol><h3 id="数据传输机制" tabindex="-1"><a class="header-anchor" href="#数据传输机制"><span>数据传输机制</span></a></h3><h4 id="帧结构" tabindex="-1"><a class="header-anchor" href="#帧结构"><span>帧结构</span></a></h4><p>WebSockets协议使用帧（Frame）来传输数据，每个帧包含以下部分：</p><ol><li><strong>FIN位</strong>：标识是否为最后一帧</li><li><strong>RSV1-3位</strong>：扩展位，通常为0</li><li><strong>操作码（Opcode）</strong>：标识帧的类型</li><li><strong>MASK位</strong>：标识数据是否被掩码</li><li><strong>载荷长度</strong>：标识数据长度</li><li><strong>掩码密钥</strong>：用于解码数据</li><li><strong>载荷数据</strong>：实际传输的数据</li></ol><h4 id="帧类型" tabindex="-1"><a class="header-anchor" href="#帧类型"><span>帧类型</span></a></h4><ul><li><strong>0x0</strong>：继续帧</li><li><strong>0x1</strong>：文本帧</li><li><strong>0x2</strong>：二进制帧</li><li><strong>0x8</strong>：关闭连接帧</li><li><strong>0x9</strong>：Ping帧</li><li><strong>0xA</strong>：Pong帧</li></ul><h3 id="连接管理" tabindex="-1"><a class="header-anchor" href="#连接管理"><span>连接管理</span></a></h3><h4 id="连接建立" tabindex="-1"><a class="header-anchor" href="#连接建立"><span>连接建立</span></a></h4><p>连接建立后，客户端和服务器可以随时发送数据帧。</p><h4 id="连接保持" tabindex="-1"><a class="header-anchor" href="#连接保持"><span>连接保持</span></a></h4><p>通过心跳机制保持连接活跃：</p><ul><li><strong>Ping/Pong帧</strong>：用于检测连接状态</li><li><strong>超时机制</strong>：在指定时间内未收到数据则关闭连接</li></ul><h4 id="连接关闭" tabindex="-1"><a class="header-anchor" href="#连接关闭"><span>连接关闭</span></a></h4><p>任一方都可以发起连接关闭：</p><ol><li>发送关闭帧（Opcode 0x8）</li><li>等待对方确认关闭帧</li><li>关闭TCP连接</li></ol><h2 id="技术细节" tabindex="-1"><a class="header-anchor" href="#技术细节"><span>技术细节</span></a></h2><h3 id="安全机制" tabindex="-1"><a class="header-anchor" href="#安全机制"><span>安全机制</span></a></h3><h4 id="origin-header" tabindex="-1"><a class="header-anchor" href="#origin-header"><span>Origin Header</span></a></h4><p>通过Origin Header防止跨站WebSocket劫持攻击。</p><h4 id="加密传输" tabindex="-1"><a class="header-anchor" href="#加密传输"><span>加密传输</span></a></h4><p>使用WSS（WebSockets Secure）协议，基于TLS/SSL加密传输数据。</p><h4 id="掩码机制" tabindex="-1"><a class="header-anchor" href="#掩码机制"><span>掩码机制</span></a></h4><p>客户端发送的数据必须进行掩码处理，防止缓存污染攻击。</p><h3 id="扩展机制" tabindex="-1"><a class="header-anchor" href="#扩展机制"><span>扩展机制</span></a></h3><h4 id="协议扩展" tabindex="-1"><a class="header-anchor" href="#协议扩展"><span>协议扩展</span></a></h4><p>WebSockets协议支持扩展机制，允许添加新的功能：</p><ul><li><strong>压缩扩展</strong>：如permessage-deflate</li><li><strong>多路复用扩展</strong>：如WebSocket multiplexing</li></ul><h4 id="子协议" tabindex="-1"><a class="header-anchor" href="#子协议"><span>子协议</span></a></h4><p>通过Sec-WebSocket-Protocol头协商子协议，实现特定应用协议。</p><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><h4 id="连接错误" tabindex="-1"><a class="header-anchor" href="#连接错误"><span>连接错误</span></a></h4><ul><li>网络中断</li><li>协议错误</li><li>服务器错误</li></ul><h4 id="数据错误" tabindex="-1"><a class="header-anchor" href="#数据错误"><span>数据错误</span></a></h4><ul><li>数据格式错误</li><li>编码错误</li><li>业务逻辑错误</li></ul><h2 id="实现示例" tabindex="-1"><a class="header-anchor" href="#实现示例"><span>实现示例</span></a></h2><h3 id="javascript客户端实现" tabindex="-1"><a class="header-anchor" href="#javascript客户端实现"><span>JavaScript客户端实现</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建WebSocket连接</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> socket</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WebSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ws://localhost:8080/chat&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 连接打开事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onopen</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;连接已建立&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hello Server!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 接收消息事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onmessage</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;收到消息:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 连接关闭事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onclose</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;连接已关闭&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 错误事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onerror</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;发生错误:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 发送消息</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sendMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">readyState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> WebSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">OPEN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        socket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;message&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            content</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            timestamp</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toISOString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="node-js服务器实现" tabindex="-1"><a class="header-anchor" href="#node-js服务器实现"><span>Node.js服务器实现</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> WebSocket</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ws&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建WebSocket服务器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> wss</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> WebSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">port</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 连接事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">wss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;connection&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ws</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;新连接建立&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 接收消息事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    ws</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;message&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> incoming</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;收到消息:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 广播消息给所有客户端</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        wss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">clients</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> each</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">readyState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> WebSocket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">OPEN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">                client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 连接关闭事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    ws</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;close&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;连接已关闭&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 发送欢迎消息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    ws</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;welcome&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        message</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;欢迎连接到WebSocket服务器&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化"><span>性能优化</span></a></h2><h3 id="连接优化" tabindex="-1"><a class="header-anchor" href="#连接优化"><span>连接优化</span></a></h3><ul><li><strong>连接池</strong>：复用连接减少建立开销</li><li><strong>心跳机制</strong>：定期检测连接状态</li><li><strong>超时设置</strong>：合理设置连接超时时间</li></ul><h3 id="数据优化" tabindex="-1"><a class="header-anchor" href="#数据优化"><span>数据优化</span></a></h3><ul><li><strong>消息压缩</strong>：使用压缩扩展减少传输量</li><li><strong>批量发送</strong>：合并多个小消息为一个大消息</li><li><strong>二进制传输</strong>：对于大数据使用二进制格式</li></ul><h3 id="扩展性设计" tabindex="-1"><a class="header-anchor" href="#扩展性设计"><span>扩展性设计</span></a></h3><ul><li><strong>负载均衡</strong>：在多个服务器实例间分配连接</li><li><strong>集群部署</strong>：实现多节点集群</li><li><strong>消息路由</strong>：智能路由消息到正确的节点</li></ul><h2 id="安全考虑" tabindex="-1"><a class="header-anchor" href="#安全考虑"><span>安全考虑</span></a></h2><h3 id="身份验证" tabindex="-1"><a class="header-anchor" href="#身份验证"><span>身份验证</span></a></h3><ul><li><strong>连接时验证</strong>：在握手阶段进行身份验证</li><li><strong>令牌机制</strong>：使用JWT等令牌进行认证</li><li><strong>权限控制</strong>：控制用户可以访问的资源</li></ul><h3 id="数据安全" tabindex="-1"><a class="header-anchor" href="#数据安全"><span>数据安全</span></a></h3><ul><li><strong>加密传输</strong>：使用WSS协议加密数据</li><li><strong>数据校验</strong>：验证接收数据的完整性</li><li><strong>敏感信息保护</strong>：避免传输敏感信息</li></ul><h3 id="攻击防护" tabindex="-1"><a class="header-anchor" href="#攻击防护"><span>攻击防护</span></a></h3><ul><li><strong>DDoS防护</strong>：限制连接数和消息频率</li><li><strong>注入防护</strong>：验证和清理输入数据</li><li><strong>跨站防护</strong>：检查Origin Header</li></ul><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><h3 id="连接管理-1" tabindex="-1"><a class="header-anchor" href="#连接管理-1"><span>连接管理</span></a></h3><ul><li><strong>合理的重连机制</strong>：在网络中断时自动重连</li><li><strong>连接状态监控</strong>：实时监控连接状态</li><li><strong>资源清理</strong>：及时释放断开的连接</li></ul><h3 id="消息处理" tabindex="-1"><a class="header-anchor" href="#消息处理"><span>消息处理</span></a></h3><ul><li><strong>消息格式标准化</strong>：使用统一的消息格式</li><li><strong>错误处理</strong>：完善的错误处理机制</li><li><strong>日志记录</strong>：详细记录消息处理过程</li></ul><h3 id="性能监控" tabindex="-1"><a class="header-anchor" href="#性能监控"><span>性能监控</span></a></h3><ul><li><strong>连接数监控</strong>：监控当前连接数</li><li><strong>消息吞吐量</strong>：监控消息发送和接收速率</li><li><strong>延迟监控</strong>：监控消息传输延迟</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>WebSockets协议通过其全双工通信、低延迟、持久连接等特性，为实现实时双向通信提供了强大的技术支持。理解WebSockets协议的工作机制、技术细节和最佳实践，对于构建高性能的实时应用至关重要。</p><p>在实际项目中，我们需要根据具体的业务需求和技术约束，合理应用WebSockets技术，同时关注安全性、性能和可扩展性等方面的问题。</p><p>在后续章节中，我们将探讨WebSockets在微服务架构中的应用，以及如何与其他通信方式结合使用，构建更加完善的分布式系统。</p>`,90)])])}const r=i(h,[["render",e]]),d=JSON.parse('{"path":"/posts/communication/016-2-6-1-websockets-protocol-introduction.html","title":"WebSockets协议详解：实现实时双向通信的技术基石","lang":"zh-CN","frontmatter":{"title":"WebSockets协议详解：实现实时双向通信的技术基石","date":"2025-08-31T00:00:00.000Z","categories":["ServiceCommunication"],"tags":["communication"],"published":true,"description":"WebSockets协议作为实现实时双向通信的重要技术，已经成为了现代Web应用和分布式系统中不可或缺的组成部分。自2011年被IETF标准化为RFC 6455以来，WebSockets协议为开发者提供了在单个TCP连接上进行全双工通信的能力，彻底改变了传统的请求-响应模式。本文将深入探讨WebSockets协议的核心概念、工作机制、技术细节以及在实际...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebSockets协议详解：实现实时双向通信的技术基石\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T09:05:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/communication/016-2-6-1-websockets-protocol-introduction.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"WebSockets协议详解：实现实时双向通信的技术基石"}],["meta",{"property":"og:description","content":"WebSockets协议作为实现实时双向通信的重要技术，已经成为了现代Web应用和分布式系统中不可或缺的组成部分。自2011年被IETF标准化为RFC 6455以来，WebSockets协议为开发者提供了在单个TCP连接上进行全双工通信的能力，彻底改变了传统的请求-响应模式。本文将深入探讨WebSockets协议的核心概念、工作机制、技术细节以及在实际..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T09:05:07.000Z"}],["meta",{"property":"article:tag","content":"communication"}],["meta",{"property":"article:published_time","content":"2025-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T09:05:07.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1757235907000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":2},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":6.37,"words":1912},"filePathRelative":"posts/communication/016-2-6-1-websockets-protocol-introduction.md","excerpt":"<p>WebSockets协议作为实现实时双向通信的重要技术，已经成为了现代Web应用和分布式系统中不可或缺的组成部分。自2011年被IETF标准化为RFC 6455以来，WebSockets协议为开发者提供了在单个TCP连接上进行全双工通信的能力，彻底改变了传统的请求-响应模式。本文将深入探讨WebSockets协议的核心概念、工作机制、技术细节以及在实际应用中的最佳实践。</p>\\n<h2>WebSockets协议概述</h2>\\n<p>WebSockets是一种在单个TCP连接上进行全双工通信的协议，它使得客户端和服务器之间可以进行实时、双向的数据交换。与传统的HTTP协议不同，WebSockets协议允许服务器主动向客户端推送数据，而不需要客户端发起请求。</p>","autoDesc":true}');export{r as comp,d as data};
