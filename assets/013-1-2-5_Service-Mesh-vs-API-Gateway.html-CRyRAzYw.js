import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as s,o as n}from"./app-DAaD84tA.js";const r={};function p(e,l){return n(),a("div",null,[...l[0]||(l[0]=[s('<h2 id="服务网格与api网关的区别-协同工作的云原生组件" tabindex="-1"><a class="header-anchor" href="#服务网格与api网关的区别-协同工作的云原生组件"><span>服务网格与API网关的区别：协同工作的云原生组件</span></a></h2><p>在云原生生态系统中，服务网格和API网关都是重要的基础设施组件，它们都在处理网络流量方面发挥着关键作用。然而，它们的设计目标、应用场景和功能特点存在显著差异。理解这些差异以及它们如何协同工作，对于构建高效的微服务架构至关重要。本章将深入对比服务网格与API网关的异同，并探讨它们在现代应用架构中的协同作用。</p><h3 id="基本概念与定义" tabindex="-1"><a class="header-anchor" href="#基本概念与定义"><span>基本概念与定义</span></a></h3><p>在深入对比之前，我们需要明确服务网格和API网关的基本概念。</p><h4 id="服务网格的定义" tabindex="-1"><a class="header-anchor" href="#服务网格的定义"><span>服务网格的定义</span></a></h4><p>服务网格是一个专门处理服务间通信的基础设施层。它负责在现代云原生应用程序的复杂服务拓扑中，以可靠的方式传递请求。服务网格通常通过一组轻量级网络代理来实现，这些代理与应用程序代码部署在一起，但对应用程序是透明的。</p><p>服务网格的核心特征包括：</p><ul><li><strong>东西向流量管理</strong>：主要处理服务间的内部通信</li><li><strong>分布式架构</strong>：通过Sidecar代理实现分布式部署</li><li><strong>透明性</strong>：对应用程序透明，无需修改代码</li><li><strong>全面功能</strong>：提供流量管理、安全、可观察性等全面功能</li></ul><h4 id="api网关的定义" tabindex="-1"><a class="header-anchor" href="#api网关的定义"><span>API网关的定义</span></a></h4><p>API网关是一个服务器，是系统的唯一入口点。它封装了系统内部架构，并为每个客户端提供定制的API。API网关负责请求路由、组合和协议转换等任务。</p><p>API网关的核心特征包括：</p><ul><li><strong>南北向流量管理</strong>：主要处理客户端到服务端的外部通信</li><li><strong>集中式架构</strong>：通常以集中式方式部署</li><li><strong>协议转换</strong>：支持多种协议间的转换</li><li><strong>功能聚合</strong>：聚合多种功能，如认证、限流、监控等</li></ul><h3 id="架构设计对比" tabindex="-1"><a class="header-anchor" href="#架构设计对比"><span>架构设计对比</span></a></h3><p>服务网格和API网关在架构设计上存在根本性差异。</p><h4 id="服务网格的架构设计" tabindex="-1"><a class="header-anchor" href="#服务网格的架构设计"><span>服务网格的架构设计</span></a></h4><p>服务网格采用分布式架构设计：</p><p><strong>数据平面与控制平面分离</strong></p><ul><li>数据平面由Sidecar代理组成，处理实际的网络流量</li><li>控制平面负责配置管理和策略分发</li></ul><p><strong>Sidecar模式</strong></p><ul><li>每个服务实例配有一个Sidecar代理</li><li>代理与服务实例共享相同的生命周期</li></ul><p><strong>零信任安全模型</strong></p><ul><li>默认不信任任何网络流量</li><li>通过mTLS确保服务间通信安全</li></ul><h4 id="api网关的架构设计" tabindex="-1"><a class="header-anchor" href="#api网关的架构设计"><span>API网关的架构设计</span></a></h4><p>API网关通常采用集中式架构设计：</p><p><strong>单一入口点</strong></p><ul><li>作为系统的所有外部流量入口</li><li>集中处理所有客户端请求</li></ul><p><strong>功能聚合</strong></p><ul><li>在单一组件中聚合多种功能</li><li>提供统一的接口和协议转换</li></ul><p><strong>可扩展性</strong></p><ul><li>通过水平扩展处理更多请求</li><li>支持插件机制扩展功能</li></ul><h3 id="流量处理方向对比" tabindex="-1"><a class="header-anchor" href="#流量处理方向对比"><span>流量处理方向对比</span></a></h3><p>服务网格和API网关在处理流量的方向上存在显著差异。</p><h4 id="服务网格的流量处理" tabindex="-1"><a class="header-anchor" href="#服务网格的流量处理"><span>服务网格的流量处理</span></a></h4><p>服务网格主要处理东西向流量：</p><p><strong>内部服务通信</strong></p><ul><li>处理微服务之间的内部通信</li><li>管理服务间的依赖关系</li><li>实现服务发现和负载均衡</li></ul><p><strong>细粒度控制</strong></p><ul><li>提供服务级、API级的流量控制</li><li>支持复杂的路由规则</li><li>实现金丝雀发布和A/B测试</li></ul><p><strong>全面治理</strong></p><ul><li>提供全面的服务治理功能</li><li>实现服务间的安全控制</li><li>收集详细的遥测数据</li></ul><h4 id="api网关的流量处理" tabindex="-1"><a class="header-anchor" href="#api网关的流量处理"><span>API网关的流量处理</span></a></h4><p>API网关主要处理南北向流量：</p><p><strong>外部请求处理</strong></p><ul><li>处理来自客户端的外部请求</li><li>实现请求路由和协议转换</li><li>提供统一的API接口</li></ul><p><strong>边界安全</strong></p><ul><li>实现外部访问的安全控制</li><li>提供认证和授权功能</li><li>实施限流和防护机制</li></ul><p><strong>功能聚合</strong></p><ul><li>聚合多个服务的响应</li><li>实现API的组合和编排</li><li>提供缓存和优化功能</li></ul><h3 id="功能特性对比" tabindex="-1"><a class="header-anchor" href="#功能特性对比"><span>功能特性对比</span></a></h3><p>服务网格和API网关在功能特性上各有侧重。</p><h4 id="服务网格的核心功能" tabindex="-1"><a class="header-anchor" href="#服务网格的核心功能"><span>服务网格的核心功能</span></a></h4><p><strong>流量管理</strong></p><ul><li>负载均衡：在多个服务实例间分配请求</li><li>路由控制：根据规则路由流量</li><li>流量整形：控制流量的速率和模式</li><li>故障处理：实现重试、超时、断路器等机制</li></ul><p><strong>安全控制</strong></p><ul><li>mTLS实施：为服务间通信提供双向TLS加密</li><li>访问控制：执行细粒度的访问控制策略</li><li>身份验证：验证服务身份</li><li>证书管理：管理安全证书的生命周期</li></ul><p><strong>可观察性</strong></p><ul><li>指标收集：收集请求延迟、错误率等指标</li><li>日志生成：生成详细的访问日志</li><li>追踪数据：生成分布式追踪信息</li><li>监控告警：提供监控和告警功能</li></ul><p><strong>弹性保障</strong></p><ul><li>重试机制：自动重试失败的请求</li><li>超时控制：防止请求无限期等待</li><li>断路器：在服务不可用时快速失败</li><li>限流控制：控制请求的处理速率</li></ul><h4 id="api网关的核心功能" tabindex="-1"><a class="header-anchor" href="#api网关的核心功能"><span>API网关的核心功能</span></a></h4><p><strong>请求路由</strong></p><ul><li>路径路由：根据URL路径路由请求</li><li>主机路由：根据主机名路由请求</li><li>方法路由：根据HTTP方法路由请求</li><li>条件路由：根据条件表达式路由请求</li></ul><p><strong>协议转换</strong></p><ul><li>HTTP到gRPC转换</li><li>REST到SOAP转换</li><li>协议版本转换</li><li>数据格式转换</li></ul><p><strong>安全防护</strong></p><ul><li>身份认证：支持OAuth、JWT等多种认证方式</li><li>访问授权：实现细粒度的访问控制</li><li>请求验证：验证请求的合法性</li><li>防护机制：防止DDoS、SQL注入等攻击</li></ul><p><strong>流量控制</strong></p><ul><li>限流控制：控制请求的处理速率</li><li>熔断机制：在服务不可用时快速失败</li><li>缓存机制：缓存响应结果</li><li>压缩优化：压缩响应数据</li></ul><h3 id="部署模式对比" tabindex="-1"><a class="header-anchor" href="#部署模式对比"><span>部署模式对比</span></a></h3><p>服务网格和API网关在部署模式上也存在差异。</p><h4 id="服务网格的部署模式" tabindex="-1"><a class="header-anchor" href="#服务网格的部署模式"><span>服务网格的部署模式</span></a></h4><p><strong>Sidecar模式</strong></p><ul><li>每个服务实例配有一个Sidecar代理</li><li>代理与服务实例共同部署</li><li>支持容器化和虚拟机部署</li></ul><p><strong>多集群支持</strong></p><ul><li>支持跨多个集群的统一管理</li><li>实现多集群服务发现</li><li>支持多集群流量管理</li></ul><p><strong>混合部署</strong></p><ul><li>支持Kubernetes和虚拟机混合部署</li><li>实现异构环境的统一管理</li><li>支持多云部署</li></ul><h4 id="api网关的部署模式" tabindex="-1"><a class="header-anchor" href="#api网关的部署模式"><span>API网关的部署模式</span></a></h4><p><strong>集中式部署</strong></p><ul><li>作为单一入口点集中部署</li><li>支持高可用集群部署</li><li>实现负载均衡和故障转移</li></ul><p><strong>边缘部署</strong></p><ul><li>部署在网络边缘位置</li><li>减少请求处理延迟</li><li>提供更好的用户体验</li></ul><p><strong>分布式部署</strong></p><ul><li>在多个地理位置分布式部署</li><li>实现就近访问</li><li>支持全球负载均衡</li></ul><h3 id="使用场景对比" tabindex="-1"><a class="header-anchor" href="#使用场景对比"><span>使用场景对比</span></a></h3><p>服务网格和API网关适用于不同的使用场景。</p><h4 id="服务网格的适用场景" tabindex="-1"><a class="header-anchor" href="#服务网格的适用场景"><span>服务网格的适用场景</span></a></h4><p><strong>复杂微服务架构</strong></p><ul><li>服务数量众多，依赖关系复杂</li><li>需要精细的流量控制</li><li>要求高可用性和容错能力</li></ul><p><strong>多语言开发环境</strong></p><ul><li>团队使用不同的编程语言</li><li>需要统一的服务治理策略</li><li>希望避免重复实现相同功能</li></ul><p><strong>高安全性要求</strong></p><ul><li>对服务间通信安全有严格要求</li><li>需要详细的审计日志</li><li>要求细粒度的访问控制</li></ul><p><strong>云原生环境</strong></p><ul><li>采用容器化部署</li><li>使用Kubernetes等编排平台</li><li>需要与云原生生态集成</li></ul><h4 id="api网关的适用场景" tabindex="-1"><a class="header-anchor" href="#api网关的适用场景"><span>API网关的适用场景</span></a></h4><p><strong>对外API服务</strong></p><ul><li>需要向外部客户提供API服务</li><li>要求统一的API接口</li><li>需要协议转换功能</li></ul><p><strong>移动应用后端</strong></p><ul><li>为移动应用提供后端服务</li><li>需要聚合多个服务的响应</li><li>要求优化移动网络访问</li></ul><p><strong>传统系统集成</strong></p><ul><li>需要集成传统系统</li><li>要求协议转换和适配</li><li>需要统一的访问入口</li></ul><p><strong>B2B集成</strong></p><ul><li>需要向合作伙伴提供API服务</li><li>要求细粒度的访问控制</li><li>需要详细的计费和监控</li></ul><h3 id="协同工作模式" tabindex="-1"><a class="header-anchor" href="#协同工作模式"><span>协同工作模式</span></a></h3><p>服务网格和API网关并非互斥，而是可以协同工作，各自发挥优势。</p><h4 id="分层架构模式" tabindex="-1"><a class="header-anchor" href="#分层架构模式"><span>分层架构模式</span></a></h4><p><strong>边界层</strong></p><ul><li>API网关作为系统的边界层</li><li>处理所有外部请求</li><li>实现边界安全和协议转换</li></ul><p><strong>内部层</strong></p><ul><li>服务网格作为内部通信层</li><li>处理服务间通信</li><li>实现内部安全和流量管理</li></ul><h4 id="功能互补模式" tabindex="-1"><a class="header-anchor" href="#功能互补模式"><span>功能互补模式</span></a></h4><p><strong>API网关负责</strong></p><ul><li>外部认证和授权</li><li>协议转换和数据格式转换</li><li>请求聚合和编排</li><li>边界限流和防护</li></ul><p><strong>服务网格负责</strong></p><ul><li>内部服务间通信</li><li>服务发现和负载均衡</li><li>内部安全和mTLS</li><li>详细监控和追踪</li></ul><h4 id="统一管理模式" tabindex="-1"><a class="header-anchor" href="#统一管理模式"><span>统一管理模式</span></a></h4><p><strong>配置管理</strong></p><ul><li>通过统一平台管理API网关和服务网格配置</li><li>实现策略的一致性</li><li>提供统一的监控视图</li></ul><p><strong>安全策略</strong></p><ul><li>统一定义安全策略</li><li>实现端到端的安全控制</li><li>提供完整的审计日志</li></ul><h3 id="性能与资源对比" tabindex="-1"><a class="header-anchor" href="#性能与资源对比"><span>性能与资源对比</span></a></h3><p>服务网格和API网关在性能和资源消耗方面各有特点。</p><h4 id="服务网格的性能特点" tabindex="-1"><a class="header-anchor" href="#服务网格的性能特点"><span>服务网格的性能特点</span></a></h4><p><strong>延迟影响</strong></p><ul><li>每个请求需要经过Sidecar代理</li><li>增加一定的网络延迟</li><li>通过优化可以减少延迟影响</li></ul><p><strong>资源消耗</strong></p><ul><li>每个服务实例需要额外的代理资源</li><li>总体资源消耗相对较高</li><li>可以通过优化减少资源消耗</li></ul><p><strong>扩展性</strong></p><ul><li>支持水平扩展</li><li>可以根据服务实例数量扩展</li><li>扩展相对复杂</li></ul><h4 id="api网关的性能特点" tabindex="-1"><a class="header-anchor" href="#api网关的性能特点"><span>API网关的性能特点</span></a></h4><p><strong>处理能力</strong></p><ul><li>集中处理所有外部请求</li><li>需要较高的处理能力</li><li>支持水平扩展</li></ul><p><strong>延迟表现</strong></p><ul><li>作为单一入口点可能增加延迟</li><li>可以通过优化减少延迟</li><li>通常延迟影响较小</li></ul><p><strong>资源效率</strong></p><ul><li>集中部署，资源利用效率较高</li><li>可以根据请求量调整资源</li><li>相对节省资源</li></ul><h3 id="选型考虑因素" tabindex="-1"><a class="header-anchor" href="#选型考虑因素"><span>选型考虑因素</span></a></h3><p>在选择使用服务网格、API网关或两者结合时，需要考虑以下因素：</p><h4 id="业务需求" tabindex="-1"><a class="header-anchor" href="#业务需求"><span>业务需求</span></a></h4><p><strong>流量模式</strong></p><ul><li>东西向流量多还是南北向流量多</li><li>是否需要复杂的内部流量管理</li><li>是否需要协议转换功能</li></ul><p><strong>安全要求</strong></p><ul><li>对内部通信安全的要求</li><li>对外部访问安全的要求</li><li>是否需要端到端的安全控制</li></ul><p><strong>治理需求</strong></p><ul><li>是否需要精细的服务治理</li><li>是否需要详细的监控和追踪</li><li>是否需要统一的策略管理</li></ul><h4 id="技术能力" tabindex="-1"><a class="header-anchor" href="#技术能力"><span>技术能力</span></a></h4><p><strong>团队技能</strong></p><ul><li>团队对服务网格的掌握程度</li><li>团队对API网关的掌握程度</li><li>是否有足够的人力资源</li></ul><p><strong>基础设施</strong></p><ul><li>是否支持容器化部署</li><li>是否有Kubernetes等编排平台</li><li>网络基础设施是否满足要求</li></ul><h4 id="成本考虑" tabindex="-1"><a class="header-anchor" href="#成本考虑"><span>成本考虑</span></a></h4><p><strong>实施成本</strong></p><ul><li>学习和培训成本</li><li>初期部署和配置成本</li><li>持续的运维和管理成本</li></ul><p><strong>运行成本</strong></p><ul><li>硬件和软件成本</li><li>云服务费用</li><li>人力成本</li></ul><h3 id="实际应用案例" tabindex="-1"><a class="header-anchor" href="#实际应用案例"><span>实际应用案例</span></a></h3><h4 id="电商平台架构" tabindex="-1"><a class="header-anchor" href="#电商平台架构"><span>电商平台架构</span></a></h4><p><strong>API网关应用</strong></p><ul><li>处理来自Web、移动App、第三方的请求</li><li>实现用户认证和权限控制</li><li>聚合商品、订单、支付等服务的响应</li></ul><p><strong>服务网格应用</strong></p><ul><li>管理商品、订单、支付、库存等内部服务通信</li><li>实现服务间的负载均衡和故障处理</li><li>提供详细的服务监控和追踪</li></ul><h4 id="金融科技平台" tabindex="-1"><a class="header-anchor" href="#金融科技平台"><span>金融科技平台</span></a></h4><p><strong>API网关应用</strong></p><ul><li>处理来自客户、合作伙伴的API请求</li><li>实现严格的安全认证和授权</li><li>提供合规的审计日志</li></ul><p><strong>服务网格应用</strong></p><ul><li>管理风控、交易、清算、报表等内部服务通信</li><li>实现高安全性的内部通信</li><li>提供详细的监控和故障排查能力</li></ul><h4 id="saas服务平台" tabindex="-1"><a class="header-anchor" href="#saas服务平台"><span>SaaS服务平台</span></a></h4><p><strong>API网关应用</strong></p><ul><li>为不同租户提供定制化的API接口</li><li>实现多租户隔离和资源控制</li><li>提供统一的计费和监控</li></ul><p><strong>服务网格应用</strong></p><ul><li>管理用户管理、权限控制、数据存储等内部服务</li><li>实现服务间的可靠通信</li><li>提供多租户环境下的服务治理</li></ul><h3 id="未来发展趋势" tabindex="-1"><a class="header-anchor" href="#未来发展趋势"><span>未来发展趋势</span></a></h3><p>服务网格和API网关都在不断发展演进：</p><h4 id="服务网格发展趋势" tabindex="-1"><a class="header-anchor" href="#服务网格发展趋势"><span>服务网格发展趋势</span></a></h4><p><strong>轻量化</strong></p><ul><li>减少资源消耗</li><li>提高处理性能</li><li>简化部署和管理</li></ul><p><strong>标准化</strong></p><ul><li>推进接口和协议标准化</li><li>提高不同实现间的互操作性</li><li>完善生态系统</li></ul><p><strong>智能化</strong></p><ul><li>基于AI的智能流量管理</li><li>自适应配置优化</li><li>预测性故障处理</li></ul><h4 id="api网关发展趋势" tabindex="-1"><a class="header-anchor" href="#api网关发展趋势"><span>API网关发展趋势</span></a></h4><p><strong>云原生集成</strong></p><ul><li>更好地与Kubernetes等平台集成</li><li>支持服务网格协同工作</li><li>提供云原生的管理体验</li></ul><p><strong>边缘计算支持</strong></p><ul><li>支持边缘部署</li><li>优化边缘计算场景下的性能</li><li>提供边缘安全防护</li></ul><p><strong>无服务器集成</strong></p><ul><li>与无服务器架构深度集成</li><li>支持函数级API管理</li><li>提供事件驱动的API处理</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>服务网格和API网关虽然都涉及流量管理，但它们在设计目标、应用场景和功能特点上存在显著差异。服务网格主要处理服务间的内部通信（东西向流量），而API网关主要处理客户端到服务端的外部通信（南北向流量）。</p><p>在实际应用中，服务网格和API网关并非互斥，而是可以协同工作，各自发挥优势。API网关作为系统的边界层处理外部请求，服务网格作为内部通信层处理服务间通信。这种分层架构模式可以充分发挥两者的优势，构建更加完善和高效的微服务架构。</p><p>选择使用服务网格、API网关或两者结合，需要根据具体的业务需求、技术能力和成本考虑进行综合评估。随着云原生技术的不断发展，服务网格和API网关都将持续演进，在轻量化、标准化、智能化等方面取得新的突破。</p><p>在后续章节中，我们将深入探讨服务网格如何实现流量管理、安全控制和可观察性等核心功能，以及这些功能如何与API网关协同工作，构建完整的云原生应用架构。</p>',193)])])}const h=i(r,[["render",p]]),u=JSON.parse('{"path":"/posts/service-mesh/013-1-2-5_Service-Mesh-vs-API-Gateway.html","title":"服务网格与API网关的区别：协同工作的云原生组件","lang":"zh-CN","frontmatter":{"title":"服务网格与API网关的区别：协同工作的云原生组件","date":"2025-08-30T00:00:00.000Z","categories":["Service Mesh"],"tags":["service-mesh"],"published":true,"description":"服务网格与API网关的区别：协同工作的云原生组件 在云原生生态系统中，服务网格和API网关都是重要的基础设施组件，它们都在处理网络流量方面发挥着关键作用。然而，它们的设计目标、应用场景和功能特点存在显著差异。理解这些差异以及它们如何协同工作，对于构建高效的微服务架构至关重要。本章将深入对比服务网格与API网关的异同，并探讨它们在现代应用架构中的协同作用...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"服务网格与API网关的区别：协同工作的云原生组件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T09:05:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/service-mesh/013-1-2-5_Service-Mesh-vs-API-Gateway.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"服务网格与API网关的区别：协同工作的云原生组件"}],["meta",{"property":"og:description","content":"服务网格与API网关的区别：协同工作的云原生组件 在云原生生态系统中，服务网格和API网关都是重要的基础设施组件，它们都在处理网络流量方面发挥着关键作用。然而，它们的设计目标、应用场景和功能特点存在显著差异。理解这些差异以及它们如何协同工作，对于构建高效的微服务架构至关重要。本章将深入对比服务网格与API网关的异同，并探讨它们在现代应用架构中的协同作用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T09:05:07.000Z"}],["meta",{"property":"article:tag","content":"service-mesh"}],["meta",{"property":"article:published_time","content":"2025-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T09:05:07.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1757235907000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":12.65,"words":3794},"filePathRelative":"posts/service-mesh/013-1-2-5_Service-Mesh-vs-API-Gateway.md","excerpt":"<h2>服务网格与API网关的区别：协同工作的云原生组件</h2>\\n<p>在云原生生态系统中，服务网格和API网关都是重要的基础设施组件，它们都在处理网络流量方面发挥着关键作用。然而，它们的设计目标、应用场景和功能特点存在显著差异。理解这些差异以及它们如何协同工作，对于构建高效的微服务架构至关重要。本章将深入对比服务网格与API网关的异同，并探讨它们在现代应用架构中的协同作用。</p>\\n<h3>基本概念与定义</h3>\\n<p>在深入对比之前，我们需要明确服务网格和API网关的基本概念。</p>\\n<h4>服务网格的定义</h4>\\n<p>服务网格是一个专门处理服务间通信的基础设施层。它负责在现代云原生应用程序的复杂服务拓扑中，以可靠的方式传递请求。服务网格通常通过一组轻量级网络代理来实现，这些代理与应用程序代码部署在一起，但对应用程序是透明的。</p>","autoDesc":true}');export{h as comp,u as data};
