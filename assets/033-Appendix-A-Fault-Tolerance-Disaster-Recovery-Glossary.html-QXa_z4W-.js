import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as r,o as s}from"./app-BcGQ-_EK.js";const h={};function t(i,a){return s(),n("div",null,[...a[0]||(a[0]=[r('<h1 id="附录a-容错与容灾术语表" tabindex="-1"><a class="header-anchor" href="#附录a-容错与容灾术语表"><span>附录A：容错与容灾术语表</span></a></h1><p>本术语表收录了容错与灾备领域的重要专业术语及其定义，帮助读者准确理解相关概念。</p><h2 id="a" tabindex="-1"><a class="header-anchor" href="#a"><span>A</span></a></h2><h3 id="availability-可用性" tabindex="-1"><a class="header-anchor" href="#availability-可用性"><span>Availability (可用性)</span></a></h3><p>系统在需要时能够正常运行和提供服务的概率。通常以百分比表示，如99.9%的可用性。</p><h3 id="active-active-architecture-双活架构" tabindex="-1"><a class="header-anchor" href="#active-active-architecture-双活架构"><span>Active-Active Architecture (双活架构)</span></a></h3><p>一种系统架构模式，其中多个实例同时处理请求，提供负载分担和故障转移能力。</p><h3 id="active-passive-architecture-主备架构" tabindex="-1"><a class="header-anchor" href="#active-passive-architecture-主备架构"><span>Active-Passive Architecture (主备架构)</span></a></h3><p>一种系统架构模式，其中一个实例处于活动状态处理请求，另一个实例处于待机状态，仅在主实例故障时接管服务。</p><h2 id="b" tabindex="-1"><a class="header-anchor" href="#b"><span>B</span></a></h2><h3 id="byzantine-fault-拜占庭故障" tabindex="-1"><a class="header-anchor" href="#byzantine-fault-拜占庭故障"><span>Byzantine Fault (拜占庭故障)</span></a></h3><p>指系统组件以任意方式失效的故障类型，包括组件产生错误输出、停止响应或表现出恶意行为。</p><h3 id="bulkhead-pattern-隔板模式" tabindex="-1"><a class="header-anchor" href="#bulkhead-pattern-隔板模式"><span>Bulkhead Pattern (隔板模式)</span></a></h3><p>一种容错设计模式，通过将系统资源分割成独立的隔间，防止故障在系统内传播。</p><h2 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C</span></a></h2><h3 id="chaos-engineering-混沌工程" tabindex="-1"><a class="header-anchor" href="#chaos-engineering-混沌工程"><span>Chaos Engineering (混沌工程)</span></a></h3><p>一种通过故意引入故障来测试系统韧性的实践方法。</p><h3 id="circuit-breaker-pattern-熔断器模式" tabindex="-1"><a class="header-anchor" href="#circuit-breaker-pattern-熔断器模式"><span>Circuit Breaker Pattern (熔断器模式)</span></a></h3><p>一种容错设计模式，当检测到服务故障时暂时停止向该服务发送请求，防止故障级联传播。</p><h3 id="checkpoint-检查点" tabindex="-1"><a class="header-anchor" href="#checkpoint-检查点"><span>Checkpoint (检查点)</span></a></h3><p>在系统运行过程中保存的稳定状态快照，用于故障恢复时恢复到该状态。</p><h3 id="consensus-algorithm-共识算法" tabindex="-1"><a class="header-anchor" href="#consensus-algorithm-共识算法"><span>Consensus Algorithm (共识算法)</span></a></h3><p>分布式系统中用于在多个节点间达成一致状态的算法，如Paxos、Raft等。</p><h2 id="d" tabindex="-1"><a class="header-anchor" href="#d"><span>D</span></a></h2><h3 id="disaster-recovery-灾难恢复" tabindex="-1"><a class="header-anchor" href="#disaster-recovery-灾难恢复"><span>Disaster Recovery (灾难恢复)</span></a></h3><p>在发生重大故障或灾难后，恢复系统正常运行的过程和策略。</p><h3 id="distributed-system-分布式系统" tabindex="-1"><a class="header-anchor" href="#distributed-system-分布式系统"><span>Distributed System (分布式系统)</span></a></h3><p>由多个独立计算机组成的系统，这些计算机通过网络通信协作完成共同任务。</p><h2 id="e" tabindex="-1"><a class="header-anchor" href="#e"><span>E</span></a></h2><h3 id="eventual-consistency-最终一致性" tabindex="-1"><a class="header-anchor" href="#eventual-consistency-最终一致性"><span>Eventual Consistency (最终一致性)</span></a></h3><p>一种一致性模型，保证在没有新更新的情况下，系统最终会达到一致状态。</p><h3 id="exponential-backoff-指数退避" tabindex="-1"><a class="header-anchor" href="#exponential-backoff-指数退避"><span>Exponential Backoff (指数退避)</span></a></h3><p>一种重试策略，每次重试的间隔时间按指数增长，以减少系统负载。</p><h2 id="f" tabindex="-1"><a class="header-anchor" href="#f"><span>F</span></a></h2><h3 id="fault-故障" tabindex="-1"><a class="header-anchor" href="#fault-故障"><span>Fault (故障)</span></a></h3><p>系统组件偏离其正常行为的状态。</p><h3 id="fault-tolerance-容错" tabindex="-1"><a class="header-anchor" href="#fault-tolerance-容错"><span>Fault Tolerance (容错)</span></a></h3><p>系统在部分组件发生故障时仍能继续正确运行的能力。</p><h3 id="failure-失效" tabindex="-1"><a class="header-anchor" href="#failure-失效"><span>Failure (失效)</span></a></h3><p>系统或组件停止提供其规定功能的事件。</p><h2 id="g" tabindex="-1"><a class="header-anchor" href="#g"><span>G</span></a></h2><h3 id="graceful-degradation-优雅降级" tabindex="-1"><a class="header-anchor" href="#graceful-degradation-优雅降级"><span>Graceful Degradation (优雅降级)</span></a></h3><p>当系统部分功能不可用时，以降低服务质量但仍保持核心功能可用的方式继续运行。</p><h2 id="h" tabindex="-1"><a class="header-anchor" href="#h"><span>H</span></a></h2><h3 id="heartbeat-心跳" tabindex="-1"><a class="header-anchor" href="#heartbeat-心跳"><span>Heartbeat (心跳)</span></a></h3><p>系统组件定期发送的信号，用于表明其处于正常运行状态。</p><h3 id="high-availability-高可用性" tabindex="-1"><a class="header-anchor" href="#high-availability-高可用性"><span>High Availability (高可用性)</span></a></h3><p>系统能够长时间持续提供服务的能力，通常要求达到99.9%以上的可用性。</p><h2 id="i" tabindex="-1"><a class="header-anchor" href="#i"><span>I</span></a></h2><h3 id="idempotency-幂等性" tabindex="-1"><a class="header-anchor" href="#idempotency-幂等性"><span>Idempotency (幂等性)</span></a></h3><p>操作可以多次执行而不会产生不同结果的特性。</p><h2 id="l" tabindex="-1"><a class="header-anchor" href="#l"><span>L</span></a></h2><h3 id="load-balancing-负载均衡" tabindex="-1"><a class="header-anchor" href="#load-balancing-负载均衡"><span>Load Balancing (负载均衡)</span></a></h3><p>将工作负载分配到多个计算资源上的过程，以优化资源使用和最大化吞吐量。</p><h2 id="m" tabindex="-1"><a class="header-anchor" href="#m"><span>M</span></a></h2><h3 id="microservices-微服务" tabindex="-1"><a class="header-anchor" href="#microservices-微服务"><span>Microservices (微服务)</span></a></h3><p>一种架构风格，将单一应用程序开发为一组小型服务，每个服务运行在自己的进程中。</p><h3 id="multi-site-deployment-多站点部署" tabindex="-1"><a class="header-anchor" href="#multi-site-deployment-多站点部署"><span>Multi-Site Deployment (多站点部署)</span></a></h3><p>在多个地理位置部署系统实例，以提高可用性和灾难恢复能力。</p><h2 id="n" tabindex="-1"><a class="header-anchor" href="#n"><span>N</span></a></h2><h3 id="n-1-redundancy-n-1冗余" tabindex="-1"><a class="header-anchor" href="#n-1-redundancy-n-1冗余"><span>N+1 Redundancy (N+1冗余)</span></a></h3><p>一种冗余设计，其中N个组件提供所需功能，额外1个组件作为备用。</p><h2 id="p" tabindex="-1"><a class="header-anchor" href="#p"><span>P</span></a></h2><h3 id="partition-tolerance-分区容忍性" tabindex="-1"><a class="header-anchor" href="#partition-tolerance-分区容忍性"><span>Partition Tolerance (分区容忍性)</span></a></h3><p>分布式系统在面临网络分区时仍能继续运行的能力。</p><h3 id="passive-standby-被动待机" tabindex="-1"><a class="header-anchor" href="#passive-standby-被动待机"><span>Passive Standby (被动待机)</span></a></h3><p>备用系统处于待机状态，不处理实际请求，仅在主系统故障时接管。</p><h2 id="q" tabindex="-1"><a class="header-anchor" href="#q"><span>Q</span></a></h2><h3 id="quorum-法定人数" tabindex="-1"><a class="header-anchor" href="#quorum-法定人数"><span>Quorum (法定人数)</span></a></h3><p>在分布式系统中，为达成共识所需的最小节点数。</p><h2 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>R</span></a></h2><h3 id="redundancy-冗余" tabindex="-1"><a class="header-anchor" href="#redundancy-冗余"><span>Redundancy (冗余)</span></a></h3><p>通过重复关键组件来提高系统可靠性的技术。</p><h3 id="recovery-point-objective-rpo-恢复点目标" tabindex="-1"><a class="header-anchor" href="#recovery-point-objective-rpo-恢复点目标"><span>Recovery Point Objective (RPO) (恢复点目标)</span></a></h3><p>在灾难发生后，系统能够恢复到的最远时间点，即最大可接受的数据丢失量。</p><h3 id="recovery-time-objective-rto-恢复时间目标" tabindex="-1"><a class="header-anchor" href="#recovery-time-objective-rto-恢复时间目标"><span>Recovery Time Objective (RTO) (恢复时间目标)</span></a></h3><p>从灾难发生到系统恢复正常运行所需的最长时间。</p><h3 id="rollback-回滚" tabindex="-1"><a class="header-anchor" href="#rollback-回滚"><span>Rollback (回滚)</span></a></h3><p>将系统状态恢复到之前某个检查点的操作。</p><h2 id="s" tabindex="-1"><a class="header-anchor" href="#s"><span>S</span></a></h2><h3 id="self-healing-system-自愈系统" tabindex="-1"><a class="header-anchor" href="#self-healing-system-自愈系统"><span>Self-Healing System (自愈系统)</span></a></h3><p>能够自动检测、诊断和修复故障的系统。</p><h3 id="service-level-agreement-sla-服务等级协议" tabindex="-1"><a class="header-anchor" href="#service-level-agreement-sla-服务等级协议"><span>Service Level Agreement (SLA) (服务等级协议)</span></a></h3><p>服务提供商与客户之间关于服务质量的正式协议。</p><h3 id="service-level-objective-slo-服务等级目标" tabindex="-1"><a class="header-anchor" href="#service-level-objective-slo-服务等级目标"><span>Service Level Objective (SLO) (服务等级目标)</span></a></h3><p>在SLA中定义的具体服务质量目标。</p><h3 id="split-brain-脑裂" tabindex="-1"><a class="header-anchor" href="#split-brain-脑裂"><span>Split-Brain (脑裂)</span></a></h3><p>在集群系统中，两个或多个节点同时认为自己是主节点的情况。</p><h2 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>T</span></a></h2><h3 id="timeout-超时" tabindex="-1"><a class="header-anchor" href="#timeout-超时"><span>Timeout (超时)</span></a></h3><p>在指定时间内未收到预期响应时终止操作的机制。</p><h2 id="u" tabindex="-1"><a class="header-anchor" href="#u"><span>U</span></a></h2><h3 id="uptime-正常运行时间" tabindex="-1"><a class="header-anchor" href="#uptime-正常运行时间"><span>Uptime (正常运行时间)</span></a></h3><p>系统处于正常运行状态的时间比例。</p><h2 id="v" tabindex="-1"><a class="header-anchor" href="#v"><span>V</span></a></h2><h3 id="vertical-scaling-垂直扩展" tabindex="-1"><a class="header-anchor" href="#vertical-scaling-垂直扩展"><span>Vertical Scaling (垂直扩展)</span></a></h3><p>通过增加单个服务器的资源（如CPU、内存）来提高系统性能。</p><h3 id="virtual-ip-虚拟ip" tabindex="-1"><a class="header-anchor" href="#virtual-ip-虚拟ip"><span>Virtual IP (虚拟IP)</span></a></h3><p>不直接绑定到特定网络接口的IP地址，可用于实现高可用性。</p><h2 id="w" tabindex="-1"><a class="header-anchor" href="#w"><span>W</span></a></h2><h3 id="warm-standby-温备" tabindex="-1"><a class="header-anchor" href="#warm-standby-温备"><span>Warm Standby (温备)</span></a></h3><p>备用系统处于部分运行状态，可以较快接管主系统的工作。</p><h2 id="x" tabindex="-1"><a class="header-anchor" href="#x"><span>X</span></a></h2><h3 id="xa-transaction-xa事务" tabindex="-1"><a class="header-anchor" href="#xa-transaction-xa事务"><span>XA Transaction (XA事务)</span></a></h3><p>分布式事务的标准协议，确保跨多个资源管理器的事务一致性。</p><h2 id="z" tabindex="-1"><a class="header-anchor" href="#z"><span>Z</span></a></h2><h3 id="zero-downtime-deployment-零停机部署" tabindex="-1"><a class="header-anchor" href="#zero-downtime-deployment-零停机部署"><span>Zero Downtime Deployment (零停机部署)</span></a></h3><p>在不中断服务的情况下部署新版本应用程序的技术。</p><hr><p><em>本术语表将持续更新，以反映容错与灾备领域的最新发展。</em></p>',110)])])}const d=e(h,[["render",t]]),o=JSON.parse('{"path":"/posts/fault-recovery/033-Appendix-A-Fault-Tolerance-Disaster-Recovery-Glossary.html","title":"附录A：容错与容灾术语表","lang":"zh-CN","frontmatter":{"title":"附录A：容错与容灾术语表","date":"2025-08-31T00:00:00.000Z","categories":["Fault Tolerance","Disaster Recovery"],"tags":["fault-recovery"],"published":true,"description":"附录A：容错与容灾术语表 本术语表收录了容错与灾备领域的重要专业术语及其定义，帮助读者准确理解相关概念。 A Availability (可用性) 系统在需要时能够正常运行和提供服务的概率。通常以百分比表示，如99.9%的可用性。 Active-Active Architecture (双活架构) 一种系统架构模式，其中多个实例同时处理请求，提供负载分...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"附录A：容错与容灾术语表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-07T09:05:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-micro-service/posts/fault-recovery/033-Appendix-A-Fault-Tolerance-Disaster-Recovery-Glossary.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"附录A：容错与容灾术语表"}],["meta",{"property":"og:description","content":"附录A：容错与容灾术语表 本术语表收录了容错与灾备领域的重要专业术语及其定义，帮助读者准确理解相关概念。 A Availability (可用性) 系统在需要时能够正常运行和提供服务的概率。通常以百分比表示，如99.9%的可用性。 Active-Active Architecture (双活架构) 一种系统架构模式，其中多个实例同时处理请求，提供负载分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-07T09:05:07.000Z"}],["meta",{"property":"article:tag","content":"fault-recovery"}],["meta",{"property":"article:published_time","content":"2025-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-07T09:05:07.000Z"}]]},"git":{"createdTime":1756698707000,"updatedTime":1757235907000,"contributors":[{"name":"binbin.hou","username":"","email":"binbin.hou@huifu.com","commits":1},{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":2,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":4.86,"words":1457},"filePathRelative":"posts/fault-recovery/033-Appendix-A-Fault-Tolerance-Disaster-Recovery-Glossary.md","excerpt":"\\n<p>本术语表收录了容错与灾备领域的重要专业术语及其定义，帮助读者准确理解相关概念。</p>\\n<h2>A</h2>\\n<h3>Availability (可用性)</h3>\\n<p>系统在需要时能够正常运行和提供服务的概率。通常以百分比表示，如99.9%的可用性。</p>\\n<h3>Active-Active Architecture (双活架构)</h3>\\n<p>一种系统架构模式，其中多个实例同时处理请求，提供负载分担和故障转移能力。</p>\\n<h3>Active-Passive Architecture (主备架构)</h3>\\n<p>一种系统架构模式，其中一个实例处于活动状态处理请求，另一个实例处于待机状态，仅在主实例故障时接管服务。</p>","autoDesc":true}');export{d as comp,o as data};
